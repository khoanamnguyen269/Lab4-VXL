
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004974  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc4  08004cc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc4  08004cc4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc4  08004cc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000070  08004d3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08004d3c  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be1e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002090  00000000  00000000  0002beb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018aff  00000000  00000000  0002ec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e36b  00000000  00000000  0004778f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008987a  00000000  00000000  00055afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000df374  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c58  00000000  00000000  000df3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004218  00000000  00000000  000e0020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a68 	.word	0x08004a68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004a68 	.word	0x08004a68

0800014c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a08      	ldr	r2, [pc, #32]	; (800017c <HAL_UART_RxCpltCallback+0x30>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d10a      	bne.n	8000174 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800015e:	2332      	movs	r3, #50	; 0x32
 8000160:	2201      	movs	r2, #1
 8000162:	4907      	ldr	r1, [pc, #28]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000164:	4807      	ldr	r0, [pc, #28]	; (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000166:	f002 fd48 	bl	8002bfa <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	4904      	ldr	r1, [pc, #16]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 800016e:	4805      	ldr	r0, [pc, #20]	; (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000170:	f002 fdd5 	bl	8002d1e <HAL_UART_Receive_IT>
	}
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	40004400 	.word	0x40004400
 8000180:	2000011c 	.word	0x2000011c
 8000184:	2000008c 	.word	0x2000008c

08000188 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800018c:	f001 f91c 	bl	80013c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000190:	f000 f848 	bl	8000224 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000194:	f000 f8f8 	bl	8000388 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000198:	f000 f880 	bl	800029c <MX_TIM2_Init>
	MX_USART2_UART_Init();
 800019c:	f000 f8ca 	bl	8000334 <MX_USART2_UART_Init>
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	4917      	ldr	r1, [pc, #92]	; (8000200 <main+0x78>)
 80001a4:	4817      	ldr	r0, [pc, #92]	; (8000204 <main+0x7c>)
 80001a6:	f002 fdba 	bl	8002d1e <HAL_UART_Receive_IT>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80001aa:	4817      	ldr	r0, [pc, #92]	; (8000208 <main+0x80>)
 80001ac:	f002 f944 	bl	8002438 <HAL_TIM_Base_Start_IT>
	SCH_Init();
 80001b0:	f000 f94e 	bl	8000450 <SCH_Init>
	SCH_Add_Task(display7SEG, 100, 1000);
 80001b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001b8:	2164      	movs	r1, #100	; 0x64
 80001ba:	4814      	ldr	r0, [pc, #80]	; (800020c <main+0x84>)
 80001bc:	f000 f960 	bl	8000480 <SCH_Add_Task>
	SCH_Add_Task(toggle_red, 100, 500);
 80001c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c4:	2164      	movs	r1, #100	; 0x64
 80001c6:	4812      	ldr	r0, [pc, #72]	; (8000210 <main+0x88>)
 80001c8:	f000 f95a 	bl	8000480 <SCH_Add_Task>
	SCH_Add_Task(toggle_green, 100, 1000);
 80001cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001d0:	2164      	movs	r1, #100	; 0x64
 80001d2:	4810      	ldr	r0, [pc, #64]	; (8000214 <main+0x8c>)
 80001d4:	f000 f954 	bl	8000480 <SCH_Add_Task>
	SCH_Add_Task(toggle_yellow, 100, 1500);
 80001d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001dc:	2164      	movs	r1, #100	; 0x64
 80001de:	480e      	ldr	r0, [pc, #56]	; (8000218 <main+0x90>)
 80001e0:	f000 f94e 	bl	8000480 <SCH_Add_Task>
	SCH_Add_Task(toggle_orange, 100, 2000);
 80001e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80001e8:	2164      	movs	r1, #100	; 0x64
 80001ea:	480c      	ldr	r0, [pc, #48]	; (800021c <main+0x94>)
 80001ec:	f000 f948 	bl	8000480 <SCH_Add_Task>
	SCH_Add_Task(toggle_pink, 100, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2164      	movs	r1, #100	; 0x64
 80001f4:	480a      	ldr	r0, [pc, #40]	; (8000220 <main+0x98>)
 80001f6:	f000 f943 	bl	8000480 <SCH_Add_Task>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		SCH_Dispatch_Tasks();
 80001fa:	f000 fa0d 	bl	8000618 <SCH_Dispatch_Tasks>
 80001fe:	e7fc      	b.n	80001fa <main+0x72>
 8000200:	2000011c 	.word	0x2000011c
 8000204:	2000008c 	.word	0x2000008c
 8000208:	200000d4 	.word	0x200000d4
 800020c:	08000ad1 	.word	0x08000ad1
 8000210:	08000fd1 	.word	0x08000fd1
 8000214:	080010b9 	.word	0x080010b9
 8000218:	08000ee9 	.word	0x08000ee9
 800021c:	080011a1 	.word	0x080011a1
 8000220:	0800128d 	.word	0x0800128d

08000224 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 f9f6 	bl	8003624 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fc82 	bl	8001b64 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000266:	f000 f8ed 	bl	8000444 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fef0 	bl	8002068 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800028e:	f000 f8d9 	bl	8000444 <Error_Handler>
	}
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <MX_TIM2_Init+0x94>)
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002be:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_TIM2_Init+0x94>)
 80002c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002c6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <MX_TIM2_Init+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_TIM2_Init+0x94>)
 80002d0:	2209      	movs	r2, #9
 80002d2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <MX_TIM2_Init+0x94>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <MX_TIM2_Init+0x94>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e0:	4813      	ldr	r0, [pc, #76]	; (8000330 <MX_TIM2_Init+0x94>)
 80002e2:	f002 f859 	bl	8002398 <HAL_TIM_Base_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80002ec:	f000 f8aa 	bl	8000444 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	4619      	mov	r1, r3
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <MX_TIM2_Init+0x94>)
 80002fe:	f002 f9ef 	bl	80026e0 <HAL_TIM_ConfigClockSource>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000308:	f000 f89c 	bl	8000444 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_TIM2_Init+0x94>)
 800031a:	f002 fbb7 	bl	8002a8c <HAL_TIMEx_MasterConfigSynchronization>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000324:	f000 f88e 	bl	8000444 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	200000d4 	.word	0x200000d4

08000334 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MX_USART2_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000340:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000344:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800036c:	f002 fbf8 	bl	8002b60 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000376:	f000 f865 	bl	8000444 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	2000008c 	.word	0x2000008c
 8000384:	40004400 	.word	0x40004400

08000388 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_GPIO_Init+0x9c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a20      	ldr	r2, [pc, #128]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a1a      	ldr	r2, [pc, #104]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80003d2:	4815      	ldr	r0, [pc, #84]	; (8000428 <MX_GPIO_Init+0xa0>)
 80003d4:	f001 fb94 	bl	8001b00 <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80003d8:	2200      	movs	r2, #0
 80003da:	217f      	movs	r1, #127	; 0x7f
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <MX_GPIO_Init+0xa4>)
 80003de:	f001 fb8f 	bl	8001b00 <HAL_GPIO_WritePin>
			|SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80003e2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80003e6:	60bb      	str	r3, [r7, #8]
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2302      	movs	r3, #2
 80003f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f4:	f107 0308 	add.w	r3, r7, #8
 80003f8:	4619      	mov	r1, r3
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <MX_GPIO_Init+0xa0>)
 80003fc:	f001 fa04 	bl	8001808 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
	GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000400:	237f      	movs	r3, #127	; 0x7f
 8000402:	60bb      	str	r3, [r7, #8]
			|SEG4_Pin|SEG5_Pin|SEG6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2302      	movs	r3, #2
 800040e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	4619      	mov	r1, r3
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_GPIO_Init+0xa4>)
 8000418:	f001 f9f6 	bl	8001808 <HAL_GPIO_Init>

}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	40010800 	.word	0x40010800
 800042c:	40010c00 	.word	0x40010c00

08000430 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000438:	f000 f87c 	bl	8000534 <SCH_Update>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <SCH_Init>:

// An index variable that helps manage the vacant, occupied slots in the scheduler
int current_idx_task = 0;

void SCH_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	for (int i = 0; i < SCH_MAX_TASKS; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	e005      	b.n	8000468 <SCH_Init+0x18>
		SCH_Delete_Tasks(i);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f935 	bl	80006cc <SCH_Delete_Tasks>
	for (int i = 0; i < SCH_MAX_TASKS; i++)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b27      	cmp	r3, #39	; 0x27
 800046c:	ddf6      	ble.n	800045c <SCH_Init+0xc>
	current_idx_task = 0; // Just in case (could delete this line)
 800046e:	4b03      	ldr	r3, [pc, #12]	; (800047c <SCH_Init+0x2c>)
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000440 	.word	0x20000440

08000480 <SCH_Add_Task>:

void SCH_Add_Task (void (*pFunction)(), uint32_t delay, uint32_t period)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
	if (current_idx_task < SCH_MAX_TASKS)
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <SCH_Add_Task+0xa8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b27      	cmp	r3, #39	; 0x27
 8000492:	dc44      	bgt.n	800051e <SCH_Add_Task+0x9e>
	{
		SCH_Tasks_G[current_idx_task].pTask = pFunction;
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <SCH_Add_Task+0xa8>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4924      	ldr	r1, [pc, #144]	; (800052c <SCH_Add_Task+0xac>)
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	440b      	add	r3, r1
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[current_idx_task].delay = delay/CLOCK_TICK;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <SCH_Add_Task+0xa8>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	4920      	ldr	r1, [pc, #128]	; (8000530 <SCH_Add_Task+0xb0>)
 80004b0:	fba1 1303 	umull	r1, r3, r1, r3
 80004b4:	08d9      	lsrs	r1, r3, #3
 80004b6:	481d      	ldr	r0, [pc, #116]	; (800052c <SCH_Add_Task+0xac>)
 80004b8:	4613      	mov	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	4403      	add	r3, r0
 80004c2:	3304      	adds	r3, #4
 80004c4:	6019      	str	r1, [r3, #0]
		SCH_Tasks_G[current_idx_task].period = period/CLOCK_TICK;
 80004c6:	4b18      	ldr	r3, [pc, #96]	; (8000528 <SCH_Add_Task+0xa8>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4918      	ldr	r1, [pc, #96]	; (8000530 <SCH_Add_Task+0xb0>)
 80004ce:	fba1 1303 	umull	r1, r3, r1, r3
 80004d2:	08d9      	lsrs	r1, r3, #3
 80004d4:	4815      	ldr	r0, [pc, #84]	; (800052c <SCH_Add_Task+0xac>)
 80004d6:	4613      	mov	r3, r2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4403      	add	r3, r0
 80004e0:	3308      	adds	r3, #8
 80004e2:	6019      	str	r1, [r3, #0]
		SCH_Tasks_G[current_idx_task].runMe = 0;
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <SCH_Add_Task+0xa8>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4910      	ldr	r1, [pc, #64]	; (800052c <SCH_Add_Task+0xac>)
 80004ea:	4613      	mov	r3, r2
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	440b      	add	r3, r1
 80004f4:	330c      	adds	r3, #12
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
		SCH_Tasks_G[current_idx_task].taskID = current_idx_task; // Temporarily set
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <SCH_Add_Task+0xa8>)
 80004fc:	6819      	ldr	r1, [r3, #0]
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <SCH_Add_Task+0xa8>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4608      	mov	r0, r1
 8000504:	4909      	ldr	r1, [pc, #36]	; (800052c <SCH_Add_Task+0xac>)
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	3310      	adds	r3, #16
 8000512:	6018      	str	r0, [r3, #0]
		current_idx_task++; // Update the index to the next slot
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <SCH_Add_Task+0xa8>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	4a03      	ldr	r2, [pc, #12]	; (8000528 <SCH_Add_Task+0xa8>)
 800051c:	6013      	str	r3, [r2, #0]
	}
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	20000440 	.word	0x20000440
 800052c:	20000120 	.word	0x20000120
 8000530:	cccccccd 	.word	0xcccccccd

08000534 <SCH_Update>:

void SCH_Update(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	time_unit++;
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <SCH_Update+0xd8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a32      	ldr	r2, [pc, #200]	; (800060c <SCH_Update+0xd8>)
 8000542:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < current_idx_task; i++) // Travese all active tasks
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	e054      	b.n	80005f4 <SCH_Update+0xc0>
	{
		if (SCH_Tasks_G[i].pTask == 0)
 800054a:	4931      	ldr	r1, [pc, #196]	; (8000610 <SCH_Update+0xdc>)
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d046      	beq.n	80005ec <SCH_Update+0xb8>
			continue;
		if (SCH_Tasks_G[i].delay > 0)
 800055e:	492c      	ldr	r1, [pc, #176]	; (8000610 <SCH_Update+0xdc>)
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	3304      	adds	r3, #4
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d013      	beq.n	800059c <SCH_Update+0x68>
			SCH_Tasks_G[i].delay--;
 8000574:	4926      	ldr	r1, [pc, #152]	; (8000610 <SCH_Update+0xdc>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4613      	mov	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	3304      	adds	r3, #4
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	1e59      	subs	r1, r3, #1
 8000588:	4821      	ldr	r0, [pc, #132]	; (8000610 <SCH_Update+0xdc>)
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	4613      	mov	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4403      	add	r3, r0
 8000596:	3304      	adds	r3, #4
 8000598:	6019      	str	r1, [r3, #0]
 800059a:	e028      	b.n	80005ee <SCH_Update+0xba>
		else
		{
			SCH_Tasks_G[i].delay = SCH_Tasks_G[i].period;
 800059c:	491c      	ldr	r1, [pc, #112]	; (8000610 <SCH_Update+0xdc>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	4613      	mov	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	3308      	adds	r3, #8
 80005ac:	6819      	ldr	r1, [r3, #0]
 80005ae:	4818      	ldr	r0, [pc, #96]	; (8000610 <SCH_Update+0xdc>)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4403      	add	r3, r0
 80005bc:	3304      	adds	r3, #4
 80005be:	6019      	str	r1, [r3, #0]
			SCH_Tasks_G[i].runMe += 1;
 80005c0:	4913      	ldr	r1, [pc, #76]	; (8000610 <SCH_Update+0xdc>)
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	330c      	adds	r3, #12
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2d8      	uxtb	r0, r3
 80005d6:	490e      	ldr	r1, [pc, #56]	; (8000610 <SCH_Update+0xdc>)
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4613      	mov	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	440b      	add	r3, r1
 80005e4:	330c      	adds	r3, #12
 80005e6:	4602      	mov	r2, r0
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	e000      	b.n	80005ee <SCH_Update+0xba>
			continue;
 80005ec:	bf00      	nop
	for(int i = 0; i < current_idx_task; i++) // Travese all active tasks
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <SCH_Update+0xe0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dba5      	blt.n	800054a <SCH_Update+0x16>
		}
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000d0 	.word	0x200000d0
 8000610:	20000120 	.word	0x20000120
 8000614:	20000440 	.word	0x20000440

08000618 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void) // Runs in the super-loop
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

	for (int i = 0; i < current_idx_task; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	e045      	b.n	80006b0 <SCH_Dispatch_Tasks+0x98>
	{
		if (SCH_Tasks_G[i].pTask == 0)
 8000624:	4927      	ldr	r1, [pc, #156]	; (80006c4 <SCH_Dispatch_Tasks+0xac>)
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4613      	mov	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	440b      	add	r3, r1
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d037      	beq.n	80006a8 <SCH_Dispatch_Tasks+0x90>
			continue;
		if (SCH_Tasks_G[i].runMe > 0)
 8000638:	4922      	ldr	r1, [pc, #136]	; (80006c4 <SCH_Dispatch_Tasks+0xac>)
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	330c      	adds	r3, #12
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d02d      	beq.n	80006aa <SCH_Dispatch_Tasks+0x92>
		{
			(*SCH_Tasks_G[i].pTask)();
 800064e:	491d      	ldr	r1, [pc, #116]	; (80006c4 <SCH_Dispatch_Tasks+0xac>)
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4798      	blx	r3
			SCH_Tasks_G[i].runMe--; // Must put in line first
 8000660:	4918      	ldr	r1, [pc, #96]	; (80006c4 <SCH_Dispatch_Tasks+0xac>)
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	330c      	adds	r3, #12
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3b01      	subs	r3, #1
 8000674:	b2d8      	uxtb	r0, r3
 8000676:	4913      	ldr	r1, [pc, #76]	; (80006c4 <SCH_Dispatch_Tasks+0xac>)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4613      	mov	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4413      	add	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	440b      	add	r3, r1
 8000684:	330c      	adds	r3, #12
 8000686:	4602      	mov	r2, r0
 8000688:	701a      	strb	r2, [r3, #0]
			if (SCH_Tasks_G[i].period == 0)
 800068a:	490e      	ldr	r1, [pc, #56]	; (80006c4 <SCH_Dispatch_Tasks+0xac>)
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	3308      	adds	r3, #8
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d104      	bne.n	80006aa <SCH_Dispatch_Tasks+0x92>
				SCH_Delete_Tasks(i);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f813 	bl	80006cc <SCH_Delete_Tasks>
 80006a6:	e000      	b.n	80006aa <SCH_Dispatch_Tasks+0x92>
			continue;
 80006a8:	bf00      	nop
	for (int i = 0; i < current_idx_task; i++)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <SCH_Dispatch_Tasks+0xb0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dbb4      	blt.n	8000624 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000120 	.word	0x20000120
 80006c8:	20000440 	.word	0x20000440

080006cc <SCH_Delete_Tasks>:

void SCH_Delete_Tasks(int index)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (SCH_Tasks_G[index].pTask == 0){}
 80006d4:	491b      	ldr	r1, [pc, #108]	; (8000744 <SCH_Delete_Tasks+0x78>)
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d027      	beq.n	8000738 <SCH_Delete_Tasks+0x6c>
	else
	{
		SCH_Tasks_G[index].pTask = 0x0000;
 80006e8:	4916      	ldr	r1, [pc, #88]	; (8000744 <SCH_Delete_Tasks+0x78>)
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[index].delay = 0;
 80006fa:	4912      	ldr	r1, [pc, #72]	; (8000744 <SCH_Delete_Tasks+0x78>)
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4613      	mov	r3, r2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	3304      	adds	r3, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[index].period = 0;
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <SCH_Delete_Tasks+0x78>)
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	3308      	adds	r3, #8
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[index].runMe = 0;
 8000722:	4908      	ldr	r1, [pc, #32]	; (8000744 <SCH_Delete_Tasks+0x78>)
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	330c      	adds	r3, #12
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	}
	return;
 8000736:	bf00      	nop
 8000738:	bf00      	nop
}
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000120 	.word	0x20000120

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_MspInit+0x40>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <HAL_MspInit+0x40>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x40>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_MspInit+0x40>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_MspInit+0x40>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_MspInit+0x40>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800079c:	d113      	bne.n	80007c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	201c      	movs	r0, #28
 80007bc:	f000 ff3d 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c0:	201c      	movs	r0, #28
 80007c2:	f000 ff56 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <HAL_UART_MspInit+0x98>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d137      	bne.n	8000864 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <HAL_UART_MspInit+0x9c>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a1d      	ldr	r2, [pc, #116]	; (8000870 <HAL_UART_MspInit+0x9c>)
 80007fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_UART_MspInit+0x9c>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_UART_MspInit+0x9c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_UART_MspInit+0x9c>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_UART_MspInit+0x9c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000824:	2304      	movs	r3, #4
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_UART_MspInit+0xa0>)
 8000838:	f000 ffe6 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083c:	2308      	movs	r3, #8
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_UART_MspInit+0xa0>)
 8000850:	f000 ffda 	bl	8001808 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2026      	movs	r0, #38	; 0x26
 800085a:	f000 feee 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800085e:	2026      	movs	r0, #38	; 0x26
 8000860:	f000 ff07 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40004400 	.word	0x40004400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008be:	f000 fdc9 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <TIM2_IRQHandler+0x10>)
 80008ce:	f001 fdff 	bl	80024d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000d4 	.word	0x200000d4

080008dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <USART2_IRQHandler+0x10>)
 80008e2:	f002 fa4d 	bl	8002d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000008c 	.word	0x2000008c

080008f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	return 1;
 80008f4:	2301      	movs	r3, #1
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <_kill>:

int _kill(int pid, int sig)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000908:	f002 fe62 	bl	80035d0 <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	2216      	movs	r2, #22
 8000910:	601a      	str	r2, [r3, #0]
	return -1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_exit>:

void _exit (int status)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000926:	f04f 31ff 	mov.w	r1, #4294967295
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffe7 	bl	80008fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8000930:	e7fe      	b.n	8000930 <_exit+0x12>

08000932 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	e00a      	b.n	800095a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000944:	f3af 8000 	nop.w
 8000948:	4601      	mov	r1, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	60ba      	str	r2, [r7, #8]
 8000950:	b2ca      	uxtb	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	3301      	adds	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	dbf0      	blt.n	8000944 <_read+0x12>
	}

return len;
 8000962:	687b      	ldr	r3, [r7, #4]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e009      	b.n	8000992 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	60ba      	str	r2, [r7, #8]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	dbf1      	blt.n	800097e <_write+0x12>
	}
	return len;
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_close>:

int _close(int file)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	return -1;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ca:	605a      	str	r2, [r3, #4]
	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <_isatty>:

int _isatty(int file)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	return 1;
 80009e0:	2301      	movs	r3, #1
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
	return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f002 fdcc 	bl	80035d0 <__errno>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20002800 	.word	0x20002800
 8000a64:	00000400 	.word	0x00000400
 8000a68:	20000444 	.word	0x20000444
 8000a6c:	20000460 	.word	0x20000460

08000a70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <calc_digit>:
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int calc_digit(int num)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	int res = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		if (num % 10 != num)
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <calc_digit+0x50>)
 8000a8c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a90:	109a      	asrs	r2, r3, #2
 8000a92:	17cb      	asrs	r3, r1, #31
 8000a94:	1ad2      	subs	r2, r2, r3
 8000a96:	4613      	mov	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	1aca      	subs	r2, r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d00b      	beq.n	8000abe <calc_digit+0x42>
		{
			res++;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
			num = num / 10;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a07      	ldr	r2, [pc, #28]	; (8000acc <calc_digit+0x50>)
 8000ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab4:	1092      	asrs	r2, r2, #2
 8000ab6:	17db      	asrs	r3, r3, #31
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	e7e4      	b.n	8000a88 <calc_digit+0xc>
		}
		else
			return res;
 8000abe:	68fb      	ldr	r3, [r7, #12]
	}
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	66666667 	.word	0x66666667

08000ad0 <display7SEG>:

void display7SEG()
{
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	b08e      	sub	sp, #56	; 0x38
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	466b      	mov	r3, sp
 8000ada:	469a      	mov	sl, r3
	char str1[] = "Time : ";
 8000adc:	4ac0      	ldr	r2, [pc, #768]	; (8000de0 <display7SEG+0x310>)
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae6:	e883 0003 	stmia.w	r3, {r0, r1}
	char str2[calc_digit(time_unit)];
 8000aea:	4bbe      	ldr	r3, [pc, #760]	; (8000de4 <display7SEG+0x314>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffc4 	bl	8000a7c <calc_digit>
 8000af4:	4606      	mov	r6, r0
 8000af6:	1e73      	subs	r3, r6, #1
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
 8000afa:	4632      	mov	r2, r6
 8000afc:	2300      	movs	r3, #0
 8000afe:	4690      	mov	r8, r2
 8000b00:	4699      	mov	r9, r3
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	f04f 0300 	mov.w	r3, #0
 8000b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b16:	4632      	mov	r2, r6
 8000b18:	2300      	movs	r3, #0
 8000b1a:	4614      	mov	r4, r2
 8000b1c:	461d      	mov	r5, r3
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	00eb      	lsls	r3, r5, #3
 8000b28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b2c:	00e2      	lsls	r2, r4, #3
 8000b2e:	4633      	mov	r3, r6
 8000b30:	3307      	adds	r3, #7
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	ebad 0d03 	sub.w	sp, sp, r3
 8000b3a:	466b      	mov	r3, sp
 8000b3c:	3300      	adds	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
	sprintf(str2, "%d", time_unit);
 8000b40:	4ba8      	ldr	r3, [pc, #672]	; (8000de4 <display7SEG+0x314>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	49a8      	ldr	r1, [pc, #672]	; (8000de8 <display7SEG+0x318>)
 8000b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b4a:	f002 fdb1 	bl	80036b0 <siprintf>
	char str3[] = ", Task display7SEG scheduled\r\n";
 8000b4e:	4ba7      	ldr	r3, [pc, #668]	; (8000dec <display7SEG+0x31c>)
 8000b50:	1d3c      	adds	r4, r7, #4
 8000b52:	461d      	mov	r5, r3
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b5c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b5e:	8023      	strh	r3, [r4, #0]
 8000b60:	3402      	adds	r4, #2
 8000b62:	0c1b      	lsrs	r3, r3, #16
 8000b64:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8000b66:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	2208      	movs	r2, #8
 8000b70:	489f      	ldr	r0, [pc, #636]	; (8000df0 <display7SEG+0x320>)
 8000b72:	f002 f842 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8000b76:	b2b2      	uxth	r2, r6
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b7e:	489c      	ldr	r0, [pc, #624]	; (8000df0 <display7SEG+0x320>)
 8000b80:	f002 f83b 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str3, sizeof(str3), 1000);
 8000b84:	1d39      	adds	r1, r7, #4
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	221f      	movs	r2, #31
 8000b8c:	4898      	ldr	r0, [pc, #608]	; (8000df0 <display7SEG+0x320>)
 8000b8e:	f002 f834 	bl	8002bfa <HAL_UART_Transmit>
	int count = rand() % 10;
 8000b92:	f002 fd4f 	bl	8003634 <rand>
 8000b96:	4602      	mov	r2, r0
 8000b98:	4b96      	ldr	r3, [pc, #600]	; (8000df4 <display7SEG+0x324>)
 8000b9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000b9e:	1099      	asrs	r1, r3, #2
 8000ba0:	17d3      	asrs	r3, r2, #31
 8000ba2:	1ac9      	subs	r1, r1, r3
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	switch(count)
 8000bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb2:	2b09      	cmp	r3, #9
 8000bb4:	f200 818e 	bhi.w	8000ed4 <display7SEG+0x404>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <display7SEG+0xf0>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000be9 	.word	0x08000be9
 8000bc4:	08000c31 	.word	0x08000c31
 8000bc8:	08000c79 	.word	0x08000c79
 8000bcc:	08000cc1 	.word	0x08000cc1
 8000bd0:	08000d09 	.word	0x08000d09
 8000bd4:	08000d51 	.word	0x08000d51
 8000bd8:	08000d99 	.word	0x08000d99
 8000bdc:	08000dfd 	.word	0x08000dfd
 8000be0:	08000e45 	.word	0x08000e45
 8000be4:	08000e8d 	.word	0x08000e8d
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	4882      	ldr	r0, [pc, #520]	; (8000df8 <display7SEG+0x328>)
 8000bee:	f000 ff87 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4880      	ldr	r0, [pc, #512]	; (8000df8 <display7SEG+0x328>)
 8000bf8:	f000 ff82 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2104      	movs	r1, #4
 8000c00:	487d      	ldr	r0, [pc, #500]	; (8000df8 <display7SEG+0x328>)
 8000c02:	f000 ff7d 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2108      	movs	r1, #8
 8000c0a:	487b      	ldr	r0, [pc, #492]	; (8000df8 <display7SEG+0x328>)
 8000c0c:	f000 ff78 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2110      	movs	r1, #16
 8000c14:	4878      	ldr	r0, [pc, #480]	; (8000df8 <display7SEG+0x328>)
 8000c16:	f000 ff73 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4876      	ldr	r0, [pc, #472]	; (8000df8 <display7SEG+0x328>)
 8000c20:	f000 ff6e 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	4873      	ldr	r0, [pc, #460]	; (8000df8 <display7SEG+0x328>)
 8000c2a:	f000 ff69 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000c2e:	e152      	b.n	8000ed6 <display7SEG+0x406>
		case 1:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	4870      	ldr	r0, [pc, #448]	; (8000df8 <display7SEG+0x328>)
 8000c36:	f000 ff63 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	486e      	ldr	r0, [pc, #440]	; (8000df8 <display7SEG+0x328>)
 8000c40:	f000 ff5e 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2104      	movs	r1, #4
 8000c48:	486b      	ldr	r0, [pc, #428]	; (8000df8 <display7SEG+0x328>)
 8000c4a:	f000 ff59 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	4869      	ldr	r0, [pc, #420]	; (8000df8 <display7SEG+0x328>)
 8000c54:	f000 ff54 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4866      	ldr	r0, [pc, #408]	; (8000df8 <display7SEG+0x328>)
 8000c5e:	f000 ff4f 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2120      	movs	r1, #32
 8000c66:	4864      	ldr	r0, [pc, #400]	; (8000df8 <display7SEG+0x328>)
 8000c68:	f000 ff4a 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	4861      	ldr	r0, [pc, #388]	; (8000df8 <display7SEG+0x328>)
 8000c72:	f000 ff45 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000c76:	e12e      	b.n	8000ed6 <display7SEG+0x406>
		case 2:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	485e      	ldr	r0, [pc, #376]	; (8000df8 <display7SEG+0x328>)
 8000c7e:	f000 ff3f 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2102      	movs	r1, #2
 8000c86:	485c      	ldr	r0, [pc, #368]	; (8000df8 <display7SEG+0x328>)
 8000c88:	f000 ff3a 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4859      	ldr	r0, [pc, #356]	; (8000df8 <display7SEG+0x328>)
 8000c92:	f000 ff35 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2108      	movs	r1, #8
 8000c9a:	4857      	ldr	r0, [pc, #348]	; (8000df8 <display7SEG+0x328>)
 8000c9c:	f000 ff30 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4854      	ldr	r0, [pc, #336]	; (8000df8 <display7SEG+0x328>)
 8000ca6:	f000 ff2b 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2120      	movs	r1, #32
 8000cae:	4852      	ldr	r0, [pc, #328]	; (8000df8 <display7SEG+0x328>)
 8000cb0:	f000 ff26 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	484f      	ldr	r0, [pc, #316]	; (8000df8 <display7SEG+0x328>)
 8000cba:	f000 ff21 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000cbe:	e10a      	b.n	8000ed6 <display7SEG+0x406>
		case 3:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	484c      	ldr	r0, [pc, #304]	; (8000df8 <display7SEG+0x328>)
 8000cc6:	f000 ff1b 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2102      	movs	r1, #2
 8000cce:	484a      	ldr	r0, [pc, #296]	; (8000df8 <display7SEG+0x328>)
 8000cd0:	f000 ff16 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	4847      	ldr	r0, [pc, #284]	; (8000df8 <display7SEG+0x328>)
 8000cda:	f000 ff11 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	4845      	ldr	r0, [pc, #276]	; (8000df8 <display7SEG+0x328>)
 8000ce4:	f000 ff0c 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	4842      	ldr	r0, [pc, #264]	; (8000df8 <display7SEG+0x328>)
 8000cee:	f000 ff07 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4840      	ldr	r0, [pc, #256]	; (8000df8 <display7SEG+0x328>)
 8000cf8:	f000 ff02 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <display7SEG+0x328>)
 8000d02:	f000 fefd 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000d06:	e0e6      	b.n	8000ed6 <display7SEG+0x406>
		case 4:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	483a      	ldr	r0, [pc, #232]	; (8000df8 <display7SEG+0x328>)
 8000d0e:	f000 fef7 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2102      	movs	r1, #2
 8000d16:	4838      	ldr	r0, [pc, #224]	; (8000df8 <display7SEG+0x328>)
 8000d18:	f000 fef2 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4835      	ldr	r0, [pc, #212]	; (8000df8 <display7SEG+0x328>)
 8000d22:	f000 feed 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4833      	ldr	r0, [pc, #204]	; (8000df8 <display7SEG+0x328>)
 8000d2c:	f000 fee8 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2110      	movs	r1, #16
 8000d34:	4830      	ldr	r0, [pc, #192]	; (8000df8 <display7SEG+0x328>)
 8000d36:	f000 fee3 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	482e      	ldr	r0, [pc, #184]	; (8000df8 <display7SEG+0x328>)
 8000d40:	f000 fede 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	482b      	ldr	r0, [pc, #172]	; (8000df8 <display7SEG+0x328>)
 8000d4a:	f000 fed9 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000d4e:	e0c2      	b.n	8000ed6 <display7SEG+0x406>
		case 5:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2101      	movs	r1, #1
 8000d54:	4828      	ldr	r0, [pc, #160]	; (8000df8 <display7SEG+0x328>)
 8000d56:	f000 fed3 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4826      	ldr	r0, [pc, #152]	; (8000df8 <display7SEG+0x328>)
 8000d60:	f000 fece 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2104      	movs	r1, #4
 8000d68:	4823      	ldr	r0, [pc, #140]	; (8000df8 <display7SEG+0x328>)
 8000d6a:	f000 fec9 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2108      	movs	r1, #8
 8000d72:	4821      	ldr	r0, [pc, #132]	; (8000df8 <display7SEG+0x328>)
 8000d74:	f000 fec4 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	481e      	ldr	r0, [pc, #120]	; (8000df8 <display7SEG+0x328>)
 8000d7e:	f000 febf 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2120      	movs	r1, #32
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <display7SEG+0x328>)
 8000d88:	f000 feba 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	4819      	ldr	r0, [pc, #100]	; (8000df8 <display7SEG+0x328>)
 8000d92:	f000 feb5 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000d96:	e09e      	b.n	8000ed6 <display7SEG+0x406>
		case 6:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4816      	ldr	r0, [pc, #88]	; (8000df8 <display7SEG+0x328>)
 8000d9e:	f000 feaf 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2102      	movs	r1, #2
 8000da6:	4814      	ldr	r0, [pc, #80]	; (8000df8 <display7SEG+0x328>)
 8000da8:	f000 feaa 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2104      	movs	r1, #4
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <display7SEG+0x328>)
 8000db2:	f000 fea5 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2108      	movs	r1, #8
 8000dba:	480f      	ldr	r0, [pc, #60]	; (8000df8 <display7SEG+0x328>)
 8000dbc:	f000 fea0 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <display7SEG+0x328>)
 8000dc6:	f000 fe9b 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2120      	movs	r1, #32
 8000dce:	480a      	ldr	r0, [pc, #40]	; (8000df8 <display7SEG+0x328>)
 8000dd0:	f000 fe96 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <display7SEG+0x328>)
 8000dda:	f000 fe91 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000dde:	e07a      	b.n	8000ed6 <display7SEG+0x406>
 8000de0:	08004a84 	.word	0x08004a84
 8000de4:	200000d0 	.word	0x200000d0
 8000de8:	08004a80 	.word	0x08004a80
 8000dec:	08004a8c 	.word	0x08004a8c
 8000df0:	2000008c 	.word	0x2000008c
 8000df4:	66666667 	.word	0x66666667
 8000df8:	40010c00 	.word	0x40010c00
		case 7:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <display7SEG+0x414>)
 8000e02:	f000 fe7d 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4836      	ldr	r0, [pc, #216]	; (8000ee4 <display7SEG+0x414>)
 8000e0c:	f000 fe78 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2104      	movs	r1, #4
 8000e14:	4833      	ldr	r0, [pc, #204]	; (8000ee4 <display7SEG+0x414>)
 8000e16:	f000 fe73 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4831      	ldr	r0, [pc, #196]	; (8000ee4 <display7SEG+0x414>)
 8000e20:	f000 fe6e 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2110      	movs	r1, #16
 8000e28:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <display7SEG+0x414>)
 8000e2a:	f000 fe69 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2120      	movs	r1, #32
 8000e32:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <display7SEG+0x414>)
 8000e34:	f000 fe64 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <display7SEG+0x414>)
 8000e3e:	f000 fe5f 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000e42:	e048      	b.n	8000ed6 <display7SEG+0x406>
		case 8:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <display7SEG+0x414>)
 8000e4a:	f000 fe59 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2102      	movs	r1, #2
 8000e52:	4824      	ldr	r0, [pc, #144]	; (8000ee4 <display7SEG+0x414>)
 8000e54:	f000 fe54 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <display7SEG+0x414>)
 8000e5e:	f000 fe4f 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2108      	movs	r1, #8
 8000e66:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <display7SEG+0x414>)
 8000e68:	f000 fe4a 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2110      	movs	r1, #16
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <display7SEG+0x414>)
 8000e72:	f000 fe45 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2120      	movs	r1, #32
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <display7SEG+0x414>)
 8000e7c:	f000 fe40 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <display7SEG+0x414>)
 8000e86:	f000 fe3b 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000e8a:	e024      	b.n	8000ed6 <display7SEG+0x406>
		case 9:
			HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <display7SEG+0x414>)
 8000e92:	f000 fe35 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <display7SEG+0x414>)
 8000e9c:	f000 fe30 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <display7SEG+0x414>)
 8000ea6:	f000 fe2b 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2108      	movs	r1, #8
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <display7SEG+0x414>)
 8000eb0:	f000 fe26 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <display7SEG+0x414>)
 8000eba:	f000 fe21 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <display7SEG+0x414>)
 8000ec4:	f000 fe1c 	bl	8001b00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <display7SEG+0x414>)
 8000ece:	f000 fe17 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8000ed2:	e000      	b.n	8000ed6 <display7SEG+0x406>
		default:
			break;
 8000ed4:	bf00      	nop
 8000ed6:	46d5      	mov	sp, sl
		}
}
 8000ed8:	bf00      	nop
 8000eda:	3738      	adds	r7, #56	; 0x38
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <toggle_yellow>:

void toggle_yellow()
{
 8000ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eec:	b08e      	sub	sp, #56	; 0x38
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	466b      	mov	r3, sp
 8000ef2:	469a      	mov	sl, r3
	char str1[] = "Time : ";
 8000ef4:	4a30      	ldr	r2, [pc, #192]	; (8000fb8 <toggle_yellow+0xd0>)
 8000ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efe:	e883 0003 	stmia.w	r3, {r0, r1}
	char str2[calc_digit(time_unit)];
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <toggle_yellow+0xd4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fdb8 	bl	8000a7c <calc_digit>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	1e73      	subs	r3, r6, #1
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
 8000f12:	4632      	mov	r2, r6
 8000f14:	2300      	movs	r3, #0
 8000f16:	4690      	mov	r8, r2
 8000f18:	4699      	mov	r9, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f2e:	4632      	mov	r2, r6
 8000f30:	2300      	movs	r3, #0
 8000f32:	4614      	mov	r4, r2
 8000f34:	461d      	mov	r5, r3
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	00eb      	lsls	r3, r5, #3
 8000f40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f44:	00e2      	lsls	r2, r4, #3
 8000f46:	4633      	mov	r3, r6
 8000f48:	3307      	adds	r3, #7
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f52:	466b      	mov	r3, sp
 8000f54:	3300      	adds	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
	sprintf(str2, "%d", time_unit);
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <toggle_yellow+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4918      	ldr	r1, [pc, #96]	; (8000fc0 <toggle_yellow+0xd8>)
 8000f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f62:	f002 fba5 	bl	80036b0 <siprintf>
	char str3[] = ", Task toggle_yellow scheduled\r\n";
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <toggle_yellow+0xdc>)
 8000f68:	1d3c      	adds	r4, r7, #4
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8000f78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f80:	2208      	movs	r2, #8
 8000f82:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <toggle_yellow+0xe0>)
 8000f84:	f001 fe39 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8000f88:	b2b2      	uxth	r2, r6
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <toggle_yellow+0xe0>)
 8000f92:	f001 fe32 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str3, sizeof(str3), 1000);
 8000f96:	1d39      	adds	r1, r7, #4
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	2221      	movs	r2, #33	; 0x21
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <toggle_yellow+0xe0>)
 8000fa0:	f001 fe2b 	bl	8002bfa <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <toggle_yellow+0xe4>)
 8000fa8:	f000 fdc2 	bl	8001b30 <HAL_GPIO_TogglePin>
 8000fac:	46d5      	mov	sp, sl
}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	; 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb8:	08004a84 	.word	0x08004a84
 8000fbc:	200000d0 	.word	0x200000d0
 8000fc0:	08004a80 	.word	0x08004a80
 8000fc4:	08004aac 	.word	0x08004aac
 8000fc8:	2000008c 	.word	0x2000008c
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <toggle_red>:
void toggle_red()
{
 8000fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd4:	b08c      	sub	sp, #48	; 0x30
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	466b      	mov	r3, sp
 8000fda:	469a      	mov	sl, r3
	char str1[] = "Time : ";
 8000fdc:	4a30      	ldr	r2, [pc, #192]	; (80010a0 <toggle_red+0xd0>)
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe6:	e883 0003 	stmia.w	r3, {r0, r1}
	char str2[calc_digit(time_unit)];
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <toggle_red+0xd4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd44 	bl	8000a7c <calc_digit>
 8000ff4:	4606      	mov	r6, r0
 8000ff6:	1e73      	subs	r3, r6, #1
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ffa:	4632      	mov	r2, r6
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4690      	mov	r8, r2
 8001000:	4699      	mov	r9, r3
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800100e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001016:	4632      	mov	r2, r6
 8001018:	2300      	movs	r3, #0
 800101a:	4614      	mov	r4, r2
 800101c:	461d      	mov	r5, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	00eb      	lsls	r3, r5, #3
 8001028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800102c:	00e2      	lsls	r2, r4, #3
 800102e:	4633      	mov	r3, r6
 8001030:	3307      	adds	r3, #7
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	ebad 0d03 	sub.w	sp, sp, r3
 800103a:	466b      	mov	r3, sp
 800103c:	3300      	adds	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(str2, "%d", time_unit);
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <toggle_red+0xd4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4918      	ldr	r1, [pc, #96]	; (80010a8 <toggle_red+0xd8>)
 8001048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800104a:	f002 fb31 	bl	80036b0 <siprintf>
	char str3[] = ", Task toggle_red scheduled\r\n";
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <toggle_red+0xdc>)
 8001050:	463c      	mov	r4, r7
 8001052:	461d      	mov	r5, r3
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001058:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800105c:	c407      	stmia	r4!, {r0, r1, r2}
 800105e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8001060:	f107 0120 	add.w	r1, r7, #32
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	2208      	movs	r2, #8
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <toggle_red+0xe0>)
 800106c:	f001 fdc5 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8001070:	b2b2      	uxth	r2, r6
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <toggle_red+0xe0>)
 800107a:	f001 fdbe 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str3, sizeof(str3), 1000);
 800107e:	4639      	mov	r1, r7
 8001080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001084:	221e      	movs	r2, #30
 8001086:	480a      	ldr	r0, [pc, #40]	; (80010b0 <toggle_red+0xe0>)
 8001088:	f001 fdb7 	bl	8002bfa <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 800108c:	2120      	movs	r1, #32
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <toggle_red+0xe4>)
 8001090:	f000 fd4e 	bl	8001b30 <HAL_GPIO_TogglePin>
 8001094:	46d5      	mov	sp, sl
}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a0:	08004a84 	.word	0x08004a84
 80010a4:	200000d0 	.word	0x200000d0
 80010a8:	08004a80 	.word	0x08004a80
 80010ac:	08004ad0 	.word	0x08004ad0
 80010b0:	2000008c 	.word	0x2000008c
 80010b4:	40010800 	.word	0x40010800

080010b8 <toggle_green>:
void toggle_green()
{
 80010b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010bc:	b08c      	sub	sp, #48	; 0x30
 80010be:	af00      	add	r7, sp, #0
 80010c0:	466b      	mov	r3, sp
 80010c2:	469a      	mov	sl, r3
	char str1[] = "Time : ";
 80010c4:	4a30      	ldr	r2, [pc, #192]	; (8001188 <toggle_green+0xd0>)
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ce:	e883 0003 	stmia.w	r3, {r0, r1}
	char str2[calc_digit(time_unit)];
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <toggle_green+0xd4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fcd0 	bl	8000a7c <calc_digit>
 80010dc:	4606      	mov	r6, r0
 80010de:	1e73      	subs	r3, r6, #1
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e2:	4632      	mov	r2, r6
 80010e4:	2300      	movs	r3, #0
 80010e6:	4690      	mov	r8, r2
 80010e8:	4699      	mov	r9, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010fe:	4632      	mov	r2, r6
 8001100:	2300      	movs	r3, #0
 8001102:	4614      	mov	r4, r2
 8001104:	461d      	mov	r5, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	00eb      	lsls	r3, r5, #3
 8001110:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001114:	00e2      	lsls	r2, r4, #3
 8001116:	4633      	mov	r3, r6
 8001118:	3307      	adds	r3, #7
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	ebad 0d03 	sub.w	sp, sp, r3
 8001122:	466b      	mov	r3, sp
 8001124:	3300      	adds	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(str2, "%d", time_unit);
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <toggle_green+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4918      	ldr	r1, [pc, #96]	; (8001190 <toggle_green+0xd8>)
 8001130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001132:	f002 fabd 	bl	80036b0 <siprintf>
	char str3[] = ", Task toggle_green scheduled\r\n";
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <toggle_green+0xdc>)
 8001138:	463c      	mov	r4, r7
 800113a:	461d      	mov	r5, r3
 800113c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001140:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8001148:	f107 0120 	add.w	r1, r7, #32
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	2208      	movs	r2, #8
 8001152:	4811      	ldr	r0, [pc, #68]	; (8001198 <toggle_green+0xe0>)
 8001154:	f001 fd51 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8001158:	b2b2      	uxth	r2, r6
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <toggle_green+0xe0>)
 8001162:	f001 fd4a 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str3, sizeof(str3), 1000);
 8001166:	4639      	mov	r1, r7
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	2220      	movs	r2, #32
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <toggle_green+0xe0>)
 8001170:	f001 fd43 	bl	8002bfa <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <toggle_green+0xe4>)
 8001178:	f000 fcda 	bl	8001b30 <HAL_GPIO_TogglePin>
 800117c:	46d5      	mov	sp, sl
}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001188:	08004a84 	.word	0x08004a84
 800118c:	200000d0 	.word	0x200000d0
 8001190:	08004a80 	.word	0x08004a80
 8001194:	08004af0 	.word	0x08004af0
 8001198:	2000008c 	.word	0x2000008c
 800119c:	40010800 	.word	0x40010800

080011a0 <toggle_orange>:
void toggle_orange()
{
 80011a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a4:	b08e      	sub	sp, #56	; 0x38
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	466b      	mov	r3, sp
 80011aa:	469a      	mov	sl, r3
	char str1[] = "Time : ";
 80011ac:	4a31      	ldr	r2, [pc, #196]	; (8001274 <toggle_orange+0xd4>)
 80011ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b6:	e883 0003 	stmia.w	r3, {r0, r1}
	char str2[calc_digit(time_unit)];
 80011ba:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <toggle_orange+0xd8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc5c 	bl	8000a7c <calc_digit>
 80011c4:	4606      	mov	r6, r0
 80011c6:	1e73      	subs	r3, r6, #1
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ca:	4632      	mov	r2, r6
 80011cc:	2300      	movs	r3, #0
 80011ce:	4690      	mov	r8, r2
 80011d0:	4699      	mov	r9, r3
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011e6:	4632      	mov	r2, r6
 80011e8:	2300      	movs	r3, #0
 80011ea:	4614      	mov	r4, r2
 80011ec:	461d      	mov	r5, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	00eb      	lsls	r3, r5, #3
 80011f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011fc:	00e2      	lsls	r2, r4, #3
 80011fe:	4633      	mov	r3, r6
 8001200:	3307      	adds	r3, #7
 8001202:	08db      	lsrs	r3, r3, #3
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	ebad 0d03 	sub.w	sp, sp, r3
 800120a:	466b      	mov	r3, sp
 800120c:	3300      	adds	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
	sprintf(str2, "%d", time_unit);
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <toggle_orange+0xd8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4919      	ldr	r1, [pc, #100]	; (800127c <toggle_orange+0xdc>)
 8001218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800121a:	f002 fa49 	bl	80036b0 <siprintf>
	char str3[] = ", Task toggle_orange scheduled\r\n";
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <toggle_orange+0xe0>)
 8001220:	1d3c      	adds	r4, r7, #4
 8001222:	461d      	mov	r5, r3
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8001230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	2208      	movs	r2, #8
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <toggle_orange+0xe4>)
 800123c:	f001 fcdd 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8001240:	b2b2      	uxth	r2, r6
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001248:	480e      	ldr	r0, [pc, #56]	; (8001284 <toggle_orange+0xe4>)
 800124a:	f001 fcd6 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str3, sizeof(str3), 1000);
 800124e:	1d39      	adds	r1, r7, #4
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	2221      	movs	r2, #33	; 0x21
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <toggle_orange+0xe4>)
 8001258:	f001 fccf 	bl	8002bfa <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
 800125c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001260:	4809      	ldr	r0, [pc, #36]	; (8001288 <toggle_orange+0xe8>)
 8001262:	f000 fc65 	bl	8001b30 <HAL_GPIO_TogglePin>
 8001266:	46d5      	mov	sp, sl
}
 8001268:	bf00      	nop
 800126a:	3738      	adds	r7, #56	; 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001272:	bf00      	nop
 8001274:	08004a84 	.word	0x08004a84
 8001278:	200000d0 	.word	0x200000d0
 800127c:	08004a80 	.word	0x08004a80
 8001280:	08004b10 	.word	0x08004b10
 8001284:	2000008c 	.word	0x2000008c
 8001288:	40010800 	.word	0x40010800

0800128c <toggle_pink>:
void toggle_pink()
{
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	b08c      	sub	sp, #48	; 0x30
 8001292:	af00      	add	r7, sp, #0
 8001294:	466b      	mov	r3, sp
 8001296:	469a      	mov	sl, r3
	char str1[] = "Time : ";
 8001298:	4a32      	ldr	r2, [pc, #200]	; (8001364 <toggle_pink+0xd8>)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a2:	e883 0003 	stmia.w	r3, {r0, r1}
	char str2[calc_digit(time_unit)];
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <toggle_pink+0xdc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fbe6 	bl	8000a7c <calc_digit>
 80012b0:	4606      	mov	r6, r0
 80012b2:	1e73      	subs	r3, r6, #1
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b6:	4632      	mov	r2, r6
 80012b8:	2300      	movs	r3, #0
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012d2:	4632      	mov	r2, r6
 80012d4:	2300      	movs	r3, #0
 80012d6:	4614      	mov	r4, r2
 80012d8:	461d      	mov	r5, r3
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	00eb      	lsls	r3, r5, #3
 80012e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012e8:	00e2      	lsls	r2, r4, #3
 80012ea:	4633      	mov	r3, r6
 80012ec:	3307      	adds	r3, #7
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	ebad 0d03 	sub.w	sp, sp, r3
 80012f6:	466b      	mov	r3, sp
 80012f8:	3300      	adds	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(str2, "%d", time_unit);
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <toggle_pink+0xdc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	491a      	ldr	r1, [pc, #104]	; (800136c <toggle_pink+0xe0>)
 8001304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001306:	f002 f9d3 	bl	80036b0 <siprintf>
	char str3[] = ", Task toggle_pink scheduled\r\n";
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <toggle_pink+0xe4>)
 800130c:	463c      	mov	r4, r7
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001318:	c407      	stmia	r4!, {r0, r1, r2}
 800131a:	8023      	strh	r3, [r4, #0]
 800131c:	3402      	adds	r4, #2
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8001322:	f107 0120 	add.w	r1, r7, #32
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	2208      	movs	r2, #8
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <toggle_pink+0xe8>)
 800132e:	f001 fc64 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8001332:	b2b2      	uxth	r2, r6
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <toggle_pink+0xe8>)
 800133c:	f001 fc5d 	bl	8002bfa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str3, sizeof(str3), 1000);
 8001340:	4639      	mov	r1, r7
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	221f      	movs	r2, #31
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <toggle_pink+0xe8>)
 800134a:	f001 fc56 	bl	8002bfa <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOA, LED5_Pin);
 800134e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <toggle_pink+0xec>)
 8001354:	f000 fbec 	bl	8001b30 <HAL_GPIO_TogglePin>
 8001358:	46d5      	mov	sp, sl
}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001364:	08004a84 	.word	0x08004a84
 8001368:	200000d0 	.word	0x200000d0
 800136c:	08004a80 	.word	0x08004a80
 8001370:	08004b34 	.word	0x08004b34
 8001374:	2000008c 	.word	0x2000008c
 8001378:	40010800 	.word	0x40010800

0800137c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	; (80013b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013a2:	f7ff fb65 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f002 f919 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013aa:	f7fe feed 	bl	8000188 <main>
  bx lr
 80013ae:	4770      	bx	lr
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013b8:	08004ccc 	.word	0x08004ccc
  ldr r2, =_sbss
 80013bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013c0:	2000045c 	.word	0x2000045c

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x28>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f923 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff f9b0 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f93b 	bl	800168e <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f903 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x1c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x20>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_IncTick+0x20>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000008 	.word	0x20000008
 8001474:	20000448 	.word	0x20000448

08001478 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b02      	ldr	r3, [pc, #8]	; (8001488 <HAL_GetTick+0x10>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000448 	.word	0x20000448

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <__NVIC_EnableIRQ+0x34>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff90 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff2d 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff42 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff90 	bl	800157c <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff35 	bl	80014f0 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d008      	beq.n	80016ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e020      	b.n	8001710 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020e 	bic.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
	...

0800171c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172e:	2b02      	cmp	r3, #2
 8001730:	d005      	beq.n	800173e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2204      	movs	r2, #4
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e051      	b.n	80017e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020e 	bic.w	r2, r2, #14
 800174c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_DMA_Abort_IT+0xd0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d029      	beq.n	80017bc <HAL_DMA_Abort_IT+0xa0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_DMA_Abort_IT+0xd4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d022      	beq.n	80017b8 <HAL_DMA_Abort_IT+0x9c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_DMA_Abort_IT+0xd8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d01a      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x96>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_DMA_Abort_IT+0xdc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d012      	beq.n	80017ac <HAL_DMA_Abort_IT+0x90>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_DMA_Abort_IT+0xe0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00a      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x8a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_DMA_Abort_IT+0xe4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d102      	bne.n	80017a0 <HAL_DMA_Abort_IT+0x84>
 800179a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179e:	e00e      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a4:	e00b      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017aa:	e008      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	e005      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b6:	e002      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017b8:	2310      	movs	r3, #16
 80017ba:	e000      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017bc:	2301      	movs	r3, #1
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_DMA_Abort_IT+0xe8>)
 80017c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
    } 
  }
  return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40020008 	.word	0x40020008
 80017f0:	4002001c 	.word	0x4002001c
 80017f4:	40020030 	.word	0x40020030
 80017f8:	40020044 	.word	0x40020044
 80017fc:	40020058 	.word	0x40020058
 8001800:	4002006c 	.word	0x4002006c
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b08b      	sub	sp, #44	; 0x2c
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181a:	e161      	b.n	8001ae0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800181c:	2201      	movs	r2, #1
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 8150 	bne.w	8001ada <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a97      	ldr	r2, [pc, #604]	; (8001a9c <HAL_GPIO_Init+0x294>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d05e      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001844:	4a95      	ldr	r2, [pc, #596]	; (8001a9c <HAL_GPIO_Init+0x294>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d875      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800184a:	4a95      	ldr	r2, [pc, #596]	; (8001aa0 <HAL_GPIO_Init+0x298>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d058      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001850:	4a93      	ldr	r2, [pc, #588]	; (8001aa0 <HAL_GPIO_Init+0x298>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d86f      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001856:	4a93      	ldr	r2, [pc, #588]	; (8001aa4 <HAL_GPIO_Init+0x29c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d052      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 800185c:	4a91      	ldr	r2, [pc, #580]	; (8001aa4 <HAL_GPIO_Init+0x29c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d869      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001862:	4a91      	ldr	r2, [pc, #580]	; (8001aa8 <HAL_GPIO_Init+0x2a0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d04c      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001868:	4a8f      	ldr	r2, [pc, #572]	; (8001aa8 <HAL_GPIO_Init+0x2a0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d863      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800186e:	4a8f      	ldr	r2, [pc, #572]	; (8001aac <HAL_GPIO_Init+0x2a4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d046      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001874:	4a8d      	ldr	r2, [pc, #564]	; (8001aac <HAL_GPIO_Init+0x2a4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d85d      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d82a      	bhi.n	80018d4 <HAL_GPIO_Init+0xcc>
 800187e:	2b12      	cmp	r3, #18
 8001880:	d859      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <HAL_GPIO_Init+0x80>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001903 	.word	0x08001903
 800188c:	080018dd 	.word	0x080018dd
 8001890:	080018ef 	.word	0x080018ef
 8001894:	08001931 	.word	0x08001931
 8001898:	08001937 	.word	0x08001937
 800189c:	08001937 	.word	0x08001937
 80018a0:	08001937 	.word	0x08001937
 80018a4:	08001937 	.word	0x08001937
 80018a8:	08001937 	.word	0x08001937
 80018ac:	08001937 	.word	0x08001937
 80018b0:	08001937 	.word	0x08001937
 80018b4:	08001937 	.word	0x08001937
 80018b8:	08001937 	.word	0x08001937
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001937 	.word	0x08001937
 80018c4:	08001937 	.word	0x08001937
 80018c8:	08001937 	.word	0x08001937
 80018cc:	080018e5 	.word	0x080018e5
 80018d0:	080018f9 	.word	0x080018f9
 80018d4:	4a76      	ldr	r2, [pc, #472]	; (8001ab0 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018da:	e02c      	b.n	8001936 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e029      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	3304      	adds	r3, #4
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e024      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	3308      	adds	r3, #8
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e01f      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	330c      	adds	r3, #12
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e01a      	b.n	8001938 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800190a:	2304      	movs	r3, #4
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e013      	b.n	8001938 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001918:	2308      	movs	r3, #8
 800191a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	611a      	str	r2, [r3, #16]
          break;
 8001922:	e009      	b.n	8001938 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001924:	2308      	movs	r3, #8
 8001926:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	615a      	str	r2, [r3, #20]
          break;
 800192e:	e003      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x130>
          break;
 8001936:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d801      	bhi.n	8001942 <HAL_GPIO_Init+0x13a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_Init+0x13e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2bff      	cmp	r3, #255	; 0xff
 800194c:	d802      	bhi.n	8001954 <HAL_GPIO_Init+0x14c>
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x152>
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	3b08      	subs	r3, #8
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	210f      	movs	r1, #15
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	401a      	ands	r2, r3
 800196c:	6a39      	ldr	r1, [r7, #32]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a9 	beq.w	8001ada <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001988:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x2ac>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_GPIO_Init+0x2ac>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_GPIO_Init+0x2ac>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a0:	4a45      	ldr	r2, [pc, #276]	; (8001ab8 <HAL_GPIO_Init+0x2b0>)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3d      	ldr	r2, [pc, #244]	; (8001abc <HAL_GPIO_Init+0x2b4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00d      	beq.n	80019e8 <HAL_GPIO_Init+0x1e0>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3c      	ldr	r2, [pc, #240]	; (8001ac0 <HAL_GPIO_Init+0x2b8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d007      	beq.n	80019e4 <HAL_GPIO_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3b      	ldr	r2, [pc, #236]	; (8001ac4 <HAL_GPIO_Init+0x2bc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_GPIO_Init+0x1d8>
 80019dc:	2302      	movs	r3, #2
 80019de:	e004      	b.n	80019ea <HAL_GPIO_Init+0x1e2>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x1e2>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_GPIO_Init+0x1e2>
 80019e8:	2300      	movs	r3, #0
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	f002 0203 	and.w	r2, r2, #3
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	4093      	lsls	r3, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fa:	492f      	ldr	r1, [pc, #188]	; (8001ab8 <HAL_GPIO_Init+0x2b0>)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	492b      	ldr	r1, [pc, #172]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4927      	ldr	r1, [pc, #156]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4921      	ldr	r1, [pc, #132]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	491d      	ldr	r1, [pc, #116]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4917      	ldr	r1, [pc, #92]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4913      	ldr	r1, [pc, #76]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01f      	beq.n	8001acc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
 8001a98:	e01f      	b.n	8001ada <HAL_GPIO_Init+0x2d2>
 8001a9a:	bf00      	nop
 8001a9c:	10320000 	.word	0x10320000
 8001aa0:	10310000 	.word	0x10310000
 8001aa4:	10220000 	.word	0x10220000
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10110000 	.word	0x10110000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_GPIO_Init+0x2f4>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	4909      	ldr	r1, [pc, #36]	; (8001afc <HAL_GPIO_Init+0x2f4>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	3301      	adds	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f47f ae96 	bne.w	800181c <HAL_GPIO_Init+0x14>
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	372c      	adds	r7, #44	; 0x2c
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43d9      	mvns	r1, r3
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	400b      	ands	r3, r1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e272      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b84:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d168      	bne.n	8001c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e24c      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
 8001bcc:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e02e      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a77      	ldr	r2, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c06:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a71      	ldr	r2, [pc, #452]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001c20:	4b6b      	ldr	r3, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fc1a 	bl	8001478 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fc16 	bl	8001478 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e200      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe4>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fc06 	bl	8001478 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fc02 	bl	8001478 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1ec      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x10c>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1c0      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4939      	ldr	r1, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fbbb 	bl	8001478 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fbb7 	bl	8001478 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1a1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb9a 	bl	8001478 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff fb96 	bl	8001478 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e180      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d019      	beq.n	8001dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fb7a 	bl	8001478 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff fb76 	bl	8001478 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e160      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fad8 	bl	800235c <RCC_Delay>
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff fb60 	bl	8001478 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fb5c 	bl	8001478 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d908      	bls.n	8001ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e146      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42420000 	.word	0x42420000
 8001dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e9      	bne.n	8001dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a6 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a87      	ldr	r2, [pc, #540]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb1d 	bl	8001478 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff fb19 	bl	8001478 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e103      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e02d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x334>
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x356>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a60      	ldr	r2, [pc, #384]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff facd 	bl	8001478 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fac9 	bl	8001478 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0b1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ee      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7ff fab7 	bl	8001478 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fab3 	bl	8001478 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e09b      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d061      	beq.n	800201c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d146      	bne.n	8001fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fa87 	bl	8001478 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fa83 	bl	8001478 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e06d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4921      	ldr	r1, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a19      	ldr	r1, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	491b      	ldr	r1, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fa57 	bl	8001478 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff fa53 	bl	8001478 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x46a>
 8001fec:	e035      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fa40 	bl	8001478 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff fa3c 	bl	8001478 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e026      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x498>
 800201a:	e01e      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x500>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d0      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4965      	ldr	r1, [pc, #404]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e073      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4936      	ldr	r1, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7ff f98e 	bl	8001478 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7ff f98a 	bl	8001478 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e053      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1cc>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f8ec 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	08004b64 	.word	0x08004b64
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b490      	push	{r4, r7}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002244:	1d3c      	adds	r4, r7, #4
 8002246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800224c:	f240 2301 	movw	r3, #513	; 0x201
 8002250:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d002      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x40>
 8002276:	2b08      	cmp	r3, #8
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x46>
 800227a:	e02b      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	e02b      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3328      	adds	r3, #40	; 0x28
 800228c:	443b      	add	r3, r7
 800228e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002292:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d012      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0c5b      	lsrs	r3, r3, #17
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	3328      	adds	r3, #40	; 0x28
 80022aa:	443b      	add	r3, r7
 80022ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022b6:	fb03 f202 	mul.w	r2, r3, r2
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	e004      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	623b      	str	r3, [r7, #32]
      break;
 80022d2:	e002      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d6:	623b      	str	r3, [r7, #32]
      break;
 80022d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022da:	6a3b      	ldr	r3, [r7, #32]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc90      	pop	{r4, r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	08004b54 	.word	0x08004b54
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	003d0900 	.word	0x003d0900

080022f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <HAL_RCC_GetHCLKFreq+0x10>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000000 	.word	0x20000000

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002310:	f7ff fff2 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	08004b74 	.word	0x08004b74

08002334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002338:	f7ff ffde 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0adb      	lsrs	r3, r3, #11
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	08004b74 	.word	0x08004b74

0800235c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <RCC_Delay+0x34>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <RCC_Delay+0x38>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0a5b      	lsrs	r3, r3, #9
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002378:	bf00      	nop
  }
  while (Delay --);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	60fa      	str	r2, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f9      	bne.n	8002378 <RCC_Delay+0x1c>
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000000 	.word	0x20000000
 8002394:	10624dd3 	.word	0x10624dd3

08002398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e041      	b.n	800242e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe f9e4 	bl	800078c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f000 fa6a 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d001      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e035      	b.n	80024bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_TIM_Base_Start_IT+0x90>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_TIM_Base_Start_IT+0x4e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d004      	beq.n	8002486 <HAL_TIM_Base_Start_IT+0x4e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_TIM_Base_Start_IT+0x94>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d111      	bne.n	80024aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b06      	cmp	r3, #6
 8002496:	d010      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a8:	e007      	b.n	80024ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40000400 	.word	0x40000400

080024d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0202 	mvn.w	r2, #2
 80024fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f9b1 	bl	800287a <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9a4 	bl	8002868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f9b3 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0204 	mvn.w	r2, #4
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f987 	bl	800287a <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f97a 	bl	8002868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f989 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b08      	cmp	r3, #8
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b08      	cmp	r3, #8
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0208 	mvn.w	r2, #8
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f95d 	bl	800287a <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f950 	bl	8002868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f95f 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d122      	bne.n	8002628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d11b      	bne.n	8002628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0210 	mvn.w	r2, #16
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2208      	movs	r2, #8
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f933 	bl	800287a <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f926 	bl	8002868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f935 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10e      	bne.n	8002654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0201 	mvn.w	r2, #1
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fd feee 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b80      	cmp	r3, #128	; 0x80
 8002660:	d10e      	bne.n	8002680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d107      	bne.n	8002680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa67 	bl	8002b4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d107      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f8f9 	bl	800289e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0220 	mvn.w	r2, #32
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa32 	bl	8002b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0b3      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x180>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002730:	d03e      	beq.n	80027b0 <HAL_TIM_ConfigClockSource+0xd0>
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	f200 8087 	bhi.w	8002848 <HAL_TIM_ConfigClockSource+0x168>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	f000 8085 	beq.w	800284c <HAL_TIM_ConfigClockSource+0x16c>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d87f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d01a      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xa2>
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d87b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d050      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x116>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d877      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002758:	2b50      	cmp	r3, #80	; 0x50
 800275a:	d03c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xf6>
 800275c:	2b50      	cmp	r3, #80	; 0x50
 800275e:	d873      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d058      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x136>
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d86f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002768:	2b30      	cmp	r3, #48	; 0x30
 800276a:	d064      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
 800276c:	2b30      	cmp	r3, #48	; 0x30
 800276e:	d86b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d060      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d867      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05c      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d05a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002780:	e062      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f000 f95c 	bl	8002a4e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
      break;
 80027ae:	e04e      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f000 f945 	bl	8002a4e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e03b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 f8bc 	bl	8002960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2150      	movs	r1, #80	; 0x50
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f913 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 80027f4:	e02b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	461a      	mov	r2, r3
 8002804:	f000 f8da 	bl	80029bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2160      	movs	r1, #96	; 0x60
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f903 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 8002814:	e01b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	f000 f89c 	bl	8002960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f8f3 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 8002834:	e00b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 f8ea 	bl	8002a1a <TIM_ITRx_SetConfig>
        break;
 8002846:	e002      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002848:	bf00      	nop
 800284a:	e000      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800284c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a25      	ldr	r2, [pc, #148]	; (8002958 <TIM_Base_SetConfig+0xa8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x28>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x28>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <TIM_Base_SetConfig+0xac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1a      	ldr	r2, [pc, #104]	; (8002958 <TIM_Base_SetConfig+0xa8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0x52>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x52>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <TIM_Base_SetConfig+0xac>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <TIM_Base_SetConfig+0xa8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	615a      	str	r2, [r3, #20]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400

08002960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0201 	bic.w	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800298a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f023 030a 	bic.w	r3, r3, #10
 800299c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	621a      	str	r2, [r3, #32]
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f023 0210 	bic.w	r2, r3, #16
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	031b      	lsls	r3, r3, #12
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	621a      	str	r2, [r3, #32]
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f043 0307 	orr.w	r3, r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	609a      	str	r2, [r3, #8]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e041      	b.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d004      	beq.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10c      	bne.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400

08002b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e03f      	b.n	8002bf2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fe24 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fc85 	bl	80034b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b08a      	sub	sp, #40	; 0x28
 8002bfe:	af02      	add	r7, sp, #8
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d17c      	bne.n	8002d14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_UART_Transmit+0x2c>
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e075      	b.n	8002d16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_UART_Transmit+0x3e>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e06e      	b.n	8002d16 <HAL_UART_Transmit+0x11c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2221      	movs	r2, #33	; 0x21
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4e:	f7fe fc13 	bl	8001478 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d108      	bne.n	8002c7c <HAL_UART_Transmit+0x82>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d104      	bne.n	8002c7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e003      	b.n	8002c84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c8c:	e02a      	b.n	8002ce4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fa38 	bl	800310e <UART_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e036      	b.n	8002d16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e007      	b.n	8002cd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1cf      	bne.n	8002c8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2140      	movs	r1, #64	; 0x40
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fa08 	bl	800310e <UART_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e006      	b.n	8002d16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d11d      	bne.n	8002d74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_UART_Receive_IT+0x26>
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e016      	b.n	8002d76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Receive_IT+0x38>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e00f      	b.n	8002d76 <HAL_UART_Receive_IT+0x58>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fa19 	bl	80031a2 <UART_Start_Receive_IT>
 8002d70:	4603      	mov	r3, r0
 8002d72:	e000      	b.n	8002d76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x52>
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fac9 	bl	8003362 <UART_Receive_IT>
      return;
 8002dd0:	e17b      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80b1 	beq.w	8002f3c <HAL_UART_IRQHandler+0x1bc>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_UART_IRQHandler+0x70>
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80a6 	beq.w	8002f3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_UART_IRQHandler+0x90>
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_UART_IRQHandler+0xb0>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0202 	orr.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_UART_IRQHandler+0xd0>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00f      	beq.n	8002e7a <HAL_UART_IRQHandler+0xfa>
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <HAL_UART_IRQHandler+0xee>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0208 	orr.w	r2, r3, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 811e 	beq.w	80030c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <HAL_UART_IRQHandler+0x11e>
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fa62 	bl	8003362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x146>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d031      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9a4 	bl	8003214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d023      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	4a76      	ldr	r2, [pc, #472]	; (80030d0 <HAL_UART_IRQHandler+0x350>)
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fc0c 	bl	800171c <HAL_DMA_Abort_IT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00e      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8e3 	bl	80030e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00a      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8df 	bl	80030e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e006      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8db 	bl	80030e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f36:	e0c3      	b.n	80030c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	bf00      	nop
    return;
 8002f3a:	e0c1      	b.n	80030c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 80a1 	bne.w	8003088 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 809b 	beq.w	8003088 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8095 	beq.w	8003088 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04e      	beq.n	8003020 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f8c:	8a3b      	ldrh	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8098 	beq.w	80030c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f98:	8a3a      	ldrh	r2, [r7, #16]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	f080 8092 	bcs.w	80030c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8a3a      	ldrh	r2, [r7, #16]
 8002fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d02b      	beq.n	8003008 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fbe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fde:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0210 	bic.w	r2, r2, #16
 8002ffc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fb4f 	bl	80016a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	b29b      	uxth	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f86d 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800301e:	e051      	b.n	80030c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003028:	b29b      	uxth	r3, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d047      	beq.n	80030c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003038:	8a7b      	ldrh	r3, [r7, #18]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d044      	beq.n	80030c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800304c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800307c:	8a7b      	ldrh	r3, [r7, #18]
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f839 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003086:	e01f      	b.n	80030c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_UART_IRQHandler+0x324>
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8f9 	bl	8003294 <UART_Transmit_IT>
    return;
 80030a2:	e012      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <HAL_UART_IRQHandler+0x34a>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f93a 	bl	8003332 <UART_EndTransmit_IT>
    return;
 80030be:	e004      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
    return;
 80030c0:	bf00      	nop
 80030c2:	e002      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
      return;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
      return;
 80030c8:	bf00      	nop
  }
}
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0800326d 	.word	0x0800326d

080030d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311e:	e02c      	b.n	800317a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d028      	beq.n	800317a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x30>
 800312e:	f7fe f9a3 	bl	8001478 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	429a      	cmp	r2, r3
 800313c:	d21d      	bcs.n	800317a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800314c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e00f      	b.n	800319a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4013      	ands	r3, r2
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	429a      	cmp	r2, r3
 8003196:	d0c3      	beq.n	8003120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	4613      	mov	r3, r2
 80031ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2222      	movs	r2, #34	; 0x22
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800322a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0210 	bic.w	r2, r2, #16
 8003252:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff ff2d 	bl	80030e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b21      	cmp	r3, #33	; 0x21
 80032a6:	d13e      	bne.n	8003326 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d114      	bne.n	80032dc <UART_Transmit_IT+0x48>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d110      	bne.n	80032dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]
 80032da:	e008      	b.n	80032ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	1c59      	adds	r1, r3, #1
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6211      	str	r1, [r2, #32]
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4619      	mov	r1, r3
 80032fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003310:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003320:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff febe 	bl	80030d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b22      	cmp	r3, #34	; 0x22
 8003374:	f040 8099 	bne.w	80034aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d117      	bne.n	80033b2 <UART_Receive_IT+0x50>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d113      	bne.n	80033b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
 80033b0:	e026      	b.n	8003400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d007      	beq.n	80033d6 <UART_Receive_IT+0x74>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <UART_Receive_IT+0x82>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e008      	b.n	80033f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4619      	mov	r1, r3
 800340e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003410:	2b00      	cmp	r3, #0
 8003412:	d148      	bne.n	80034a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0220 	bic.w	r2, r2, #32
 8003422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	2b01      	cmp	r3, #1
 8003452:	d123      	bne.n	800349c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0210 	bic.w	r2, r2, #16
 8003468:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b10      	cmp	r3, #16
 8003476:	d10a      	bne.n	800348e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fe2f 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
 800349a:	e002      	b.n	80034a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fc fe55 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e002      	b.n	80034ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034ee:	f023 030c 	bic.w	r3, r3, #12
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <UART_SetConfig+0x114>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d103      	bne.n	8003524 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800351c:	f7fe ff0a 	bl	8002334 <HAL_RCC_GetPCLK2Freq>
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	e002      	b.n	800352a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003524:	f7fe fef2 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8003528:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009a      	lsls	r2, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	4a22      	ldr	r2, [pc, #136]	; (80035cc <UART_SetConfig+0x118>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	0119      	lsls	r1, r3, #4
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009a      	lsls	r2, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003560:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <UART_SetConfig+0x118>)
 8003562:	fba3 0302 	umull	r0, r3, r3, r2
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2064      	movs	r0, #100	; 0x64
 800356a:	fb00 f303 	mul.w	r3, r0, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	; 0x32
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <UART_SetConfig+0x118>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003580:	4419      	add	r1, r3
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009a      	lsls	r2, r3, #2
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fbb2 f2f3 	udiv	r2, r2, r3
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <UART_SetConfig+0x118>)
 800359a:	fba3 0302 	umull	r0, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2064      	movs	r0, #100	; 0x64
 80035a2:	fb00 f303 	mul.w	r3, r0, r3
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	; 0x32
 80035ac:	4a07      	ldr	r2, [pc, #28]	; (80035cc <UART_SetConfig+0x118>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 020f 	and.w	r2, r3, #15
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	440a      	add	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40013800 	.word	0x40013800
 80035cc:	51eb851f 	.word	0x51eb851f

080035d0 <__errno>:
 80035d0:	4b01      	ldr	r3, [pc, #4]	; (80035d8 <__errno+0x8>)
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	2000000c 	.word	0x2000000c

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	2600      	movs	r6, #0
 80035e0:	4d0c      	ldr	r5, [pc, #48]	; (8003614 <__libc_init_array+0x38>)
 80035e2:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <__libc_init_array+0x3c>)
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	42a6      	cmp	r6, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	f001 fa3c 	bl	8004a68 <_init>
 80035f0:	2600      	movs	r6, #0
 80035f2:	4d0a      	ldr	r5, [pc, #40]	; (800361c <__libc_init_array+0x40>)
 80035f4:	4c0a      	ldr	r4, [pc, #40]	; (8003620 <__libc_init_array+0x44>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	42a6      	cmp	r6, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	f855 3b04 	ldr.w	r3, [r5], #4
 8003604:	4798      	blx	r3
 8003606:	3601      	adds	r6, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	f855 3b04 	ldr.w	r3, [r5], #4
 800360e:	4798      	blx	r3
 8003610:	3601      	adds	r6, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	08004cc4 	.word	0x08004cc4
 8003618:	08004cc4 	.word	0x08004cc4
 800361c:	08004cc4 	.word	0x08004cc4
 8003620:	08004cc8 	.word	0x08004cc8

08003624 <memset>:
 8003624:	4603      	mov	r3, r0
 8003626:	4402      	add	r2, r0
 8003628:	4293      	cmp	r3, r2
 800362a:	d100      	bne.n	800362e <memset+0xa>
 800362c:	4770      	bx	lr
 800362e:	f803 1b01 	strb.w	r1, [r3], #1
 8003632:	e7f9      	b.n	8003628 <memset+0x4>

08003634 <rand>:
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <rand+0x5c>)
 8003636:	b510      	push	{r4, lr}
 8003638:	681c      	ldr	r4, [r3, #0]
 800363a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800363c:	b9b3      	cbnz	r3, 800366c <rand+0x38>
 800363e:	2018      	movs	r0, #24
 8003640:	f000 f886 	bl	8003750 <malloc>
 8003644:	4602      	mov	r2, r0
 8003646:	63a0      	str	r0, [r4, #56]	; 0x38
 8003648:	b920      	cbnz	r0, 8003654 <rand+0x20>
 800364a:	214e      	movs	r1, #78	; 0x4e
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <rand+0x60>)
 800364e:	4812      	ldr	r0, [pc, #72]	; (8003698 <rand+0x64>)
 8003650:	f000 f84e 	bl	80036f0 <__assert_func>
 8003654:	4911      	ldr	r1, [pc, #68]	; (800369c <rand+0x68>)
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <rand+0x6c>)
 8003658:	e9c0 1300 	strd	r1, r3, [r0]
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <rand+0x70>)
 800365e:	2100      	movs	r1, #0
 8003660:	6083      	str	r3, [r0, #8]
 8003662:	230b      	movs	r3, #11
 8003664:	8183      	strh	r3, [r0, #12]
 8003666:	2001      	movs	r0, #1
 8003668:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800366c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800366e:	4a0e      	ldr	r2, [pc, #56]	; (80036a8 <rand+0x74>)
 8003670:	6920      	ldr	r0, [r4, #16]
 8003672:	6963      	ldr	r3, [r4, #20]
 8003674:	4342      	muls	r2, r0
 8003676:	490d      	ldr	r1, [pc, #52]	; (80036ac <rand+0x78>)
 8003678:	fb01 2203 	mla	r2, r1, r3, r2
 800367c:	fba0 0101 	umull	r0, r1, r0, r1
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	eb42 0001 	adc.w	r0, r2, r1
 8003686:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800368a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800368e:	bd10      	pop	{r4, pc}
 8003690:	2000000c 	.word	0x2000000c
 8003694:	08004b80 	.word	0x08004b80
 8003698:	08004b97 	.word	0x08004b97
 800369c:	abcd330e 	.word	0xabcd330e
 80036a0:	e66d1234 	.word	0xe66d1234
 80036a4:	0005deec 	.word	0x0005deec
 80036a8:	5851f42d 	.word	0x5851f42d
 80036ac:	4c957f2d 	.word	0x4c957f2d

080036b0 <siprintf>:
 80036b0:	b40e      	push	{r1, r2, r3}
 80036b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036b6:	b500      	push	{lr}
 80036b8:	b09c      	sub	sp, #112	; 0x70
 80036ba:	ab1d      	add	r3, sp, #116	; 0x74
 80036bc:	9002      	str	r0, [sp, #8]
 80036be:	9006      	str	r0, [sp, #24]
 80036c0:	9107      	str	r1, [sp, #28]
 80036c2:	9104      	str	r1, [sp, #16]
 80036c4:	4808      	ldr	r0, [pc, #32]	; (80036e8 <siprintf+0x38>)
 80036c6:	4909      	ldr	r1, [pc, #36]	; (80036ec <siprintf+0x3c>)
 80036c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036cc:	9105      	str	r1, [sp, #20]
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	a902      	add	r1, sp, #8
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f000 f97c 	bl	80039d0 <_svfiprintf_r>
 80036d8:	2200      	movs	r2, #0
 80036da:	9b02      	ldr	r3, [sp, #8]
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	b01c      	add	sp, #112	; 0x70
 80036e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e4:	b003      	add	sp, #12
 80036e6:	4770      	bx	lr
 80036e8:	2000000c 	.word	0x2000000c
 80036ec:	ffff0208 	.word	0xffff0208

080036f0 <__assert_func>:
 80036f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036f2:	4614      	mov	r4, r2
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <__assert_func+0x2c>)
 80036f8:	4605      	mov	r5, r0
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68d8      	ldr	r0, [r3, #12]
 80036fe:	b14c      	cbz	r4, 8003714 <__assert_func+0x24>
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <__assert_func+0x30>)
 8003702:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003706:	9100      	str	r1, [sp, #0]
 8003708:	462b      	mov	r3, r5
 800370a:	4906      	ldr	r1, [pc, #24]	; (8003724 <__assert_func+0x34>)
 800370c:	f000 f80e 	bl	800372c <fiprintf>
 8003710:	f000 fe1c 	bl	800434c <abort>
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <__assert_func+0x38>)
 8003716:	461c      	mov	r4, r3
 8003718:	e7f3      	b.n	8003702 <__assert_func+0x12>
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c
 8003720:	08004bf2 	.word	0x08004bf2
 8003724:	08004bff 	.word	0x08004bff
 8003728:	08004c2d 	.word	0x08004c2d

0800372c <fiprintf>:
 800372c:	b40e      	push	{r1, r2, r3}
 800372e:	b503      	push	{r0, r1, lr}
 8003730:	4601      	mov	r1, r0
 8003732:	ab03      	add	r3, sp, #12
 8003734:	4805      	ldr	r0, [pc, #20]	; (800374c <fiprintf+0x20>)
 8003736:	f853 2b04 	ldr.w	r2, [r3], #4
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	f000 fa6f 	bl	8003c20 <_vfiprintf_r>
 8003742:	b002      	add	sp, #8
 8003744:	f85d eb04 	ldr.w	lr, [sp], #4
 8003748:	b003      	add	sp, #12
 800374a:	4770      	bx	lr
 800374c:	2000000c 	.word	0x2000000c

08003750 <malloc>:
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <malloc+0xc>)
 8003752:	4601      	mov	r1, r0
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	f000 b86b 	b.w	8003830 <_malloc_r>
 800375a:	bf00      	nop
 800375c:	2000000c 	.word	0x2000000c

08003760 <_free_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4605      	mov	r5, r0
 8003764:	2900      	cmp	r1, #0
 8003766:	d040      	beq.n	80037ea <_free_r+0x8a>
 8003768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800376c:	1f0c      	subs	r4, r1, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	bfb8      	it	lt
 8003772:	18e4      	addlt	r4, r4, r3
 8003774:	f001 f844 	bl	8004800 <__malloc_lock>
 8003778:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <_free_r+0x8c>)
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	b933      	cbnz	r3, 800378c <_free_r+0x2c>
 800377e:	6063      	str	r3, [r4, #4]
 8003780:	6014      	str	r4, [r2, #0]
 8003782:	4628      	mov	r0, r5
 8003784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003788:	f001 b840 	b.w	800480c <__malloc_unlock>
 800378c:	42a3      	cmp	r3, r4
 800378e:	d908      	bls.n	80037a2 <_free_r+0x42>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	1821      	adds	r1, r4, r0
 8003794:	428b      	cmp	r3, r1
 8003796:	bf01      	itttt	eq
 8003798:	6819      	ldreq	r1, [r3, #0]
 800379a:	685b      	ldreq	r3, [r3, #4]
 800379c:	1809      	addeq	r1, r1, r0
 800379e:	6021      	streq	r1, [r4, #0]
 80037a0:	e7ed      	b.n	800377e <_free_r+0x1e>
 80037a2:	461a      	mov	r2, r3
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	b10b      	cbz	r3, 80037ac <_free_r+0x4c>
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	d9fa      	bls.n	80037a2 <_free_r+0x42>
 80037ac:	6811      	ldr	r1, [r2, #0]
 80037ae:	1850      	adds	r0, r2, r1
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d10b      	bne.n	80037cc <_free_r+0x6c>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	4401      	add	r1, r0
 80037b8:	1850      	adds	r0, r2, r1
 80037ba:	4283      	cmp	r3, r0
 80037bc:	6011      	str	r1, [r2, #0]
 80037be:	d1e0      	bne.n	8003782 <_free_r+0x22>
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4401      	add	r1, r0
 80037c6:	6011      	str	r1, [r2, #0]
 80037c8:	6053      	str	r3, [r2, #4]
 80037ca:	e7da      	b.n	8003782 <_free_r+0x22>
 80037cc:	d902      	bls.n	80037d4 <_free_r+0x74>
 80037ce:	230c      	movs	r3, #12
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	e7d6      	b.n	8003782 <_free_r+0x22>
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	1821      	adds	r1, r4, r0
 80037d8:	428b      	cmp	r3, r1
 80037da:	bf01      	itttt	eq
 80037dc:	6819      	ldreq	r1, [r3, #0]
 80037de:	685b      	ldreq	r3, [r3, #4]
 80037e0:	1809      	addeq	r1, r1, r0
 80037e2:	6021      	streq	r1, [r4, #0]
 80037e4:	6063      	str	r3, [r4, #4]
 80037e6:	6054      	str	r4, [r2, #4]
 80037e8:	e7cb      	b.n	8003782 <_free_r+0x22>
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	2000044c 	.word	0x2000044c

080037f0 <sbrk_aligned>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	4e0e      	ldr	r6, [pc, #56]	; (800382c <sbrk_aligned+0x3c>)
 80037f4:	460c      	mov	r4, r1
 80037f6:	6831      	ldr	r1, [r6, #0]
 80037f8:	4605      	mov	r5, r0
 80037fa:	b911      	cbnz	r1, 8003802 <sbrk_aligned+0x12>
 80037fc:	f000 fcd6 	bl	80041ac <_sbrk_r>
 8003800:	6030      	str	r0, [r6, #0]
 8003802:	4621      	mov	r1, r4
 8003804:	4628      	mov	r0, r5
 8003806:	f000 fcd1 	bl	80041ac <_sbrk_r>
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	d00a      	beq.n	8003824 <sbrk_aligned+0x34>
 800380e:	1cc4      	adds	r4, r0, #3
 8003810:	f024 0403 	bic.w	r4, r4, #3
 8003814:	42a0      	cmp	r0, r4
 8003816:	d007      	beq.n	8003828 <sbrk_aligned+0x38>
 8003818:	1a21      	subs	r1, r4, r0
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fcc6 	bl	80041ac <_sbrk_r>
 8003820:	3001      	adds	r0, #1
 8003822:	d101      	bne.n	8003828 <sbrk_aligned+0x38>
 8003824:	f04f 34ff 	mov.w	r4, #4294967295
 8003828:	4620      	mov	r0, r4
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	20000450 	.word	0x20000450

08003830 <_malloc_r>:
 8003830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003834:	1ccd      	adds	r5, r1, #3
 8003836:	f025 0503 	bic.w	r5, r5, #3
 800383a:	3508      	adds	r5, #8
 800383c:	2d0c      	cmp	r5, #12
 800383e:	bf38      	it	cc
 8003840:	250c      	movcc	r5, #12
 8003842:	2d00      	cmp	r5, #0
 8003844:	4607      	mov	r7, r0
 8003846:	db01      	blt.n	800384c <_malloc_r+0x1c>
 8003848:	42a9      	cmp	r1, r5
 800384a:	d905      	bls.n	8003858 <_malloc_r+0x28>
 800384c:	230c      	movs	r3, #12
 800384e:	2600      	movs	r6, #0
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4630      	mov	r0, r6
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003858:	4e2e      	ldr	r6, [pc, #184]	; (8003914 <_malloc_r+0xe4>)
 800385a:	f000 ffd1 	bl	8004800 <__malloc_lock>
 800385e:	6833      	ldr	r3, [r6, #0]
 8003860:	461c      	mov	r4, r3
 8003862:	bb34      	cbnz	r4, 80038b2 <_malloc_r+0x82>
 8003864:	4629      	mov	r1, r5
 8003866:	4638      	mov	r0, r7
 8003868:	f7ff ffc2 	bl	80037f0 <sbrk_aligned>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	4604      	mov	r4, r0
 8003870:	d14d      	bne.n	800390e <_malloc_r+0xde>
 8003872:	6834      	ldr	r4, [r6, #0]
 8003874:	4626      	mov	r6, r4
 8003876:	2e00      	cmp	r6, #0
 8003878:	d140      	bne.n	80038fc <_malloc_r+0xcc>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	4631      	mov	r1, r6
 800387e:	4638      	mov	r0, r7
 8003880:	eb04 0803 	add.w	r8, r4, r3
 8003884:	f000 fc92 	bl	80041ac <_sbrk_r>
 8003888:	4580      	cmp	r8, r0
 800388a:	d13a      	bne.n	8003902 <_malloc_r+0xd2>
 800388c:	6821      	ldr	r1, [r4, #0]
 800388e:	3503      	adds	r5, #3
 8003890:	1a6d      	subs	r5, r5, r1
 8003892:	f025 0503 	bic.w	r5, r5, #3
 8003896:	3508      	adds	r5, #8
 8003898:	2d0c      	cmp	r5, #12
 800389a:	bf38      	it	cc
 800389c:	250c      	movcc	r5, #12
 800389e:	4638      	mov	r0, r7
 80038a0:	4629      	mov	r1, r5
 80038a2:	f7ff ffa5 	bl	80037f0 <sbrk_aligned>
 80038a6:	3001      	adds	r0, #1
 80038a8:	d02b      	beq.n	8003902 <_malloc_r+0xd2>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	442b      	add	r3, r5
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	e00e      	b.n	80038d0 <_malloc_r+0xa0>
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	1b52      	subs	r2, r2, r5
 80038b6:	d41e      	bmi.n	80038f6 <_malloc_r+0xc6>
 80038b8:	2a0b      	cmp	r2, #11
 80038ba:	d916      	bls.n	80038ea <_malloc_r+0xba>
 80038bc:	1961      	adds	r1, r4, r5
 80038be:	42a3      	cmp	r3, r4
 80038c0:	6025      	str	r5, [r4, #0]
 80038c2:	bf18      	it	ne
 80038c4:	6059      	strne	r1, [r3, #4]
 80038c6:	6863      	ldr	r3, [r4, #4]
 80038c8:	bf08      	it	eq
 80038ca:	6031      	streq	r1, [r6, #0]
 80038cc:	5162      	str	r2, [r4, r5]
 80038ce:	604b      	str	r3, [r1, #4]
 80038d0:	4638      	mov	r0, r7
 80038d2:	f104 060b 	add.w	r6, r4, #11
 80038d6:	f000 ff99 	bl	800480c <__malloc_unlock>
 80038da:	f026 0607 	bic.w	r6, r6, #7
 80038de:	1d23      	adds	r3, r4, #4
 80038e0:	1af2      	subs	r2, r6, r3
 80038e2:	d0b6      	beq.n	8003852 <_malloc_r+0x22>
 80038e4:	1b9b      	subs	r3, r3, r6
 80038e6:	50a3      	str	r3, [r4, r2]
 80038e8:	e7b3      	b.n	8003852 <_malloc_r+0x22>
 80038ea:	6862      	ldr	r2, [r4, #4]
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	bf0c      	ite	eq
 80038f0:	6032      	streq	r2, [r6, #0]
 80038f2:	605a      	strne	r2, [r3, #4]
 80038f4:	e7ec      	b.n	80038d0 <_malloc_r+0xa0>
 80038f6:	4623      	mov	r3, r4
 80038f8:	6864      	ldr	r4, [r4, #4]
 80038fa:	e7b2      	b.n	8003862 <_malloc_r+0x32>
 80038fc:	4634      	mov	r4, r6
 80038fe:	6876      	ldr	r6, [r6, #4]
 8003900:	e7b9      	b.n	8003876 <_malloc_r+0x46>
 8003902:	230c      	movs	r3, #12
 8003904:	4638      	mov	r0, r7
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	f000 ff80 	bl	800480c <__malloc_unlock>
 800390c:	e7a1      	b.n	8003852 <_malloc_r+0x22>
 800390e:	6025      	str	r5, [r4, #0]
 8003910:	e7de      	b.n	80038d0 <_malloc_r+0xa0>
 8003912:	bf00      	nop
 8003914:	2000044c 	.word	0x2000044c

08003918 <__ssputs_r>:
 8003918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800391c:	688e      	ldr	r6, [r1, #8]
 800391e:	4682      	mov	sl, r0
 8003920:	429e      	cmp	r6, r3
 8003922:	460c      	mov	r4, r1
 8003924:	4690      	mov	r8, r2
 8003926:	461f      	mov	r7, r3
 8003928:	d838      	bhi.n	800399c <__ssputs_r+0x84>
 800392a:	898a      	ldrh	r2, [r1, #12]
 800392c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003930:	d032      	beq.n	8003998 <__ssputs_r+0x80>
 8003932:	6825      	ldr	r5, [r4, #0]
 8003934:	6909      	ldr	r1, [r1, #16]
 8003936:	3301      	adds	r3, #1
 8003938:	eba5 0901 	sub.w	r9, r5, r1
 800393c:	6965      	ldr	r5, [r4, #20]
 800393e:	444b      	add	r3, r9
 8003940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003948:	106d      	asrs	r5, r5, #1
 800394a:	429d      	cmp	r5, r3
 800394c:	bf38      	it	cc
 800394e:	461d      	movcc	r5, r3
 8003950:	0553      	lsls	r3, r2, #21
 8003952:	d531      	bpl.n	80039b8 <__ssputs_r+0xa0>
 8003954:	4629      	mov	r1, r5
 8003956:	f7ff ff6b 	bl	8003830 <_malloc_r>
 800395a:	4606      	mov	r6, r0
 800395c:	b950      	cbnz	r0, 8003974 <__ssputs_r+0x5c>
 800395e:	230c      	movs	r3, #12
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f8ca 3000 	str.w	r3, [sl]
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003974:	464a      	mov	r2, r9
 8003976:	6921      	ldr	r1, [r4, #16]
 8003978:	f000 ff1a 	bl	80047b0 <memcpy>
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003986:	81a3      	strh	r3, [r4, #12]
 8003988:	6126      	str	r6, [r4, #16]
 800398a:	444e      	add	r6, r9
 800398c:	6026      	str	r6, [r4, #0]
 800398e:	463e      	mov	r6, r7
 8003990:	6165      	str	r5, [r4, #20]
 8003992:	eba5 0509 	sub.w	r5, r5, r9
 8003996:	60a5      	str	r5, [r4, #8]
 8003998:	42be      	cmp	r6, r7
 800399a:	d900      	bls.n	800399e <__ssputs_r+0x86>
 800399c:	463e      	mov	r6, r7
 800399e:	4632      	mov	r2, r6
 80039a0:	4641      	mov	r1, r8
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	f000 ff12 	bl	80047cc <memmove>
 80039a8:	68a3      	ldr	r3, [r4, #8]
 80039aa:	2000      	movs	r0, #0
 80039ac:	1b9b      	subs	r3, r3, r6
 80039ae:	60a3      	str	r3, [r4, #8]
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	4433      	add	r3, r6
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	e7db      	b.n	8003970 <__ssputs_r+0x58>
 80039b8:	462a      	mov	r2, r5
 80039ba:	f000 ff2d 	bl	8004818 <_realloc_r>
 80039be:	4606      	mov	r6, r0
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d1e1      	bne.n	8003988 <__ssputs_r+0x70>
 80039c4:	4650      	mov	r0, sl
 80039c6:	6921      	ldr	r1, [r4, #16]
 80039c8:	f7ff feca 	bl	8003760 <_free_r>
 80039cc:	e7c7      	b.n	800395e <__ssputs_r+0x46>
	...

080039d0 <_svfiprintf_r>:
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	4698      	mov	r8, r3
 80039d6:	898b      	ldrh	r3, [r1, #12]
 80039d8:	4607      	mov	r7, r0
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	460d      	mov	r5, r1
 80039de:	4614      	mov	r4, r2
 80039e0:	b09d      	sub	sp, #116	; 0x74
 80039e2:	d50e      	bpl.n	8003a02 <_svfiprintf_r+0x32>
 80039e4:	690b      	ldr	r3, [r1, #16]
 80039e6:	b963      	cbnz	r3, 8003a02 <_svfiprintf_r+0x32>
 80039e8:	2140      	movs	r1, #64	; 0x40
 80039ea:	f7ff ff21 	bl	8003830 <_malloc_r>
 80039ee:	6028      	str	r0, [r5, #0]
 80039f0:	6128      	str	r0, [r5, #16]
 80039f2:	b920      	cbnz	r0, 80039fe <_svfiprintf_r+0x2e>
 80039f4:	230c      	movs	r3, #12
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e0d1      	b.n	8003ba2 <_svfiprintf_r+0x1d2>
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	616b      	str	r3, [r5, #20]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9309      	str	r3, [sp, #36]	; 0x24
 8003a06:	2320      	movs	r3, #32
 8003a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a0c:	2330      	movs	r3, #48	; 0x30
 8003a0e:	f04f 0901 	mov.w	r9, #1
 8003a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bbc <_svfiprintf_r+0x1ec>
 8003a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a1e:	4623      	mov	r3, r4
 8003a20:	469a      	mov	sl, r3
 8003a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a26:	b10a      	cbz	r2, 8003a2c <_svfiprintf_r+0x5c>
 8003a28:	2a25      	cmp	r2, #37	; 0x25
 8003a2a:	d1f9      	bne.n	8003a20 <_svfiprintf_r+0x50>
 8003a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a30:	d00b      	beq.n	8003a4a <_svfiprintf_r+0x7a>
 8003a32:	465b      	mov	r3, fp
 8003a34:	4622      	mov	r2, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7ff ff6d 	bl	8003918 <__ssputs_r>
 8003a3e:	3001      	adds	r0, #1
 8003a40:	f000 80aa 	beq.w	8003b98 <_svfiprintf_r+0x1c8>
 8003a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a46:	445a      	add	r2, fp
 8003a48:	9209      	str	r2, [sp, #36]	; 0x24
 8003a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80a2 	beq.w	8003b98 <_svfiprintf_r+0x1c8>
 8003a54:	2300      	movs	r3, #0
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a5e:	f10a 0a01 	add.w	sl, sl, #1
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	9307      	str	r3, [sp, #28]
 8003a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a6c:	4654      	mov	r4, sl
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a74:	4851      	ldr	r0, [pc, #324]	; (8003bbc <_svfiprintf_r+0x1ec>)
 8003a76:	f000 fe8d 	bl	8004794 <memchr>
 8003a7a:	9a04      	ldr	r2, [sp, #16]
 8003a7c:	b9d8      	cbnz	r0, 8003ab6 <_svfiprintf_r+0xe6>
 8003a7e:	06d0      	lsls	r0, r2, #27
 8003a80:	bf44      	itt	mi
 8003a82:	2320      	movmi	r3, #32
 8003a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a88:	0711      	lsls	r1, r2, #28
 8003a8a:	bf44      	itt	mi
 8003a8c:	232b      	movmi	r3, #43	; 0x2b
 8003a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a92:	f89a 3000 	ldrb.w	r3, [sl]
 8003a96:	2b2a      	cmp	r3, #42	; 0x2a
 8003a98:	d015      	beq.n	8003ac6 <_svfiprintf_r+0xf6>
 8003a9a:	4654      	mov	r4, sl
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f04f 0c0a 	mov.w	ip, #10
 8003aa2:	9a07      	ldr	r2, [sp, #28]
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aaa:	3b30      	subs	r3, #48	; 0x30
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d94e      	bls.n	8003b4e <_svfiprintf_r+0x17e>
 8003ab0:	b1b0      	cbz	r0, 8003ae0 <_svfiprintf_r+0x110>
 8003ab2:	9207      	str	r2, [sp, #28]
 8003ab4:	e014      	b.n	8003ae0 <_svfiprintf_r+0x110>
 8003ab6:	eba0 0308 	sub.w	r3, r0, r8
 8003aba:	fa09 f303 	lsl.w	r3, r9, r3
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	46a2      	mov	sl, r4
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	e7d2      	b.n	8003a6c <_svfiprintf_r+0x9c>
 8003ac6:	9b03      	ldr	r3, [sp, #12]
 8003ac8:	1d19      	adds	r1, r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	9103      	str	r1, [sp, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfbb      	ittet	lt
 8003ad2:	425b      	neglt	r3, r3
 8003ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ad8:	9307      	strge	r3, [sp, #28]
 8003ada:	9307      	strlt	r3, [sp, #28]
 8003adc:	bfb8      	it	lt
 8003ade:	9204      	strlt	r2, [sp, #16]
 8003ae0:	7823      	ldrb	r3, [r4, #0]
 8003ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae4:	d10c      	bne.n	8003b00 <_svfiprintf_r+0x130>
 8003ae6:	7863      	ldrb	r3, [r4, #1]
 8003ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aea:	d135      	bne.n	8003b58 <_svfiprintf_r+0x188>
 8003aec:	9b03      	ldr	r3, [sp, #12]
 8003aee:	3402      	adds	r4, #2
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	9203      	str	r2, [sp, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfb8      	it	lt
 8003afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003bc0 <_svfiprintf_r+0x1f0>
 8003b04:	2203      	movs	r2, #3
 8003b06:	4650      	mov	r0, sl
 8003b08:	7821      	ldrb	r1, [r4, #0]
 8003b0a:	f000 fe43 	bl	8004794 <memchr>
 8003b0e:	b140      	cbz	r0, 8003b22 <_svfiprintf_r+0x152>
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	eba0 000a 	sub.w	r0, r0, sl
 8003b16:	fa03 f000 	lsl.w	r0, r3, r0
 8003b1a:	9b04      	ldr	r3, [sp, #16]
 8003b1c:	3401      	adds	r4, #1
 8003b1e:	4303      	orrs	r3, r0
 8003b20:	9304      	str	r3, [sp, #16]
 8003b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b26:	2206      	movs	r2, #6
 8003b28:	4826      	ldr	r0, [pc, #152]	; (8003bc4 <_svfiprintf_r+0x1f4>)
 8003b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b2e:	f000 fe31 	bl	8004794 <memchr>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d038      	beq.n	8003ba8 <_svfiprintf_r+0x1d8>
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <_svfiprintf_r+0x1f8>)
 8003b38:	bb1b      	cbnz	r3, 8003b82 <_svfiprintf_r+0x1b2>
 8003b3a:	9b03      	ldr	r3, [sp, #12]
 8003b3c:	3307      	adds	r3, #7
 8003b3e:	f023 0307 	bic.w	r3, r3, #7
 8003b42:	3308      	adds	r3, #8
 8003b44:	9303      	str	r3, [sp, #12]
 8003b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b48:	4433      	add	r3, r6
 8003b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4c:	e767      	b.n	8003a1e <_svfiprintf_r+0x4e>
 8003b4e:	460c      	mov	r4, r1
 8003b50:	2001      	movs	r0, #1
 8003b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b56:	e7a5      	b.n	8003aa4 <_svfiprintf_r+0xd4>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f04f 0c0a 	mov.w	ip, #10
 8003b5e:	4619      	mov	r1, r3
 8003b60:	3401      	adds	r4, #1
 8003b62:	9305      	str	r3, [sp, #20]
 8003b64:	4620      	mov	r0, r4
 8003b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b6a:	3a30      	subs	r2, #48	; 0x30
 8003b6c:	2a09      	cmp	r2, #9
 8003b6e:	d903      	bls.n	8003b78 <_svfiprintf_r+0x1a8>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0c5      	beq.n	8003b00 <_svfiprintf_r+0x130>
 8003b74:	9105      	str	r1, [sp, #20]
 8003b76:	e7c3      	b.n	8003b00 <_svfiprintf_r+0x130>
 8003b78:	4604      	mov	r4, r0
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b80:	e7f0      	b.n	8003b64 <_svfiprintf_r+0x194>
 8003b82:	ab03      	add	r3, sp, #12
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	462a      	mov	r2, r5
 8003b88:	4638      	mov	r0, r7
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <_svfiprintf_r+0x1fc>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	f3af 8000 	nop.w
 8003b92:	1c42      	adds	r2, r0, #1
 8003b94:	4606      	mov	r6, r0
 8003b96:	d1d6      	bne.n	8003b46 <_svfiprintf_r+0x176>
 8003b98:	89ab      	ldrh	r3, [r5, #12]
 8003b9a:	065b      	lsls	r3, r3, #25
 8003b9c:	f53f af2c 	bmi.w	80039f8 <_svfiprintf_r+0x28>
 8003ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ba2:	b01d      	add	sp, #116	; 0x74
 8003ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba8:	ab03      	add	r3, sp, #12
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	462a      	mov	r2, r5
 8003bae:	4638      	mov	r0, r7
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <_svfiprintf_r+0x1fc>)
 8003bb2:	a904      	add	r1, sp, #16
 8003bb4:	f000 f9d4 	bl	8003f60 <_printf_i>
 8003bb8:	e7eb      	b.n	8003b92 <_svfiprintf_r+0x1c2>
 8003bba:	bf00      	nop
 8003bbc:	08004c2e 	.word	0x08004c2e
 8003bc0:	08004c34 	.word	0x08004c34
 8003bc4:	08004c38 	.word	0x08004c38
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	08003919 	.word	0x08003919

08003bd0 <__sfputc_r>:
 8003bd0:	6893      	ldr	r3, [r2, #8]
 8003bd2:	b410      	push	{r4}
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	6093      	str	r3, [r2, #8]
 8003bda:	da07      	bge.n	8003bec <__sfputc_r+0x1c>
 8003bdc:	6994      	ldr	r4, [r2, #24]
 8003bde:	42a3      	cmp	r3, r4
 8003be0:	db01      	blt.n	8003be6 <__sfputc_r+0x16>
 8003be2:	290a      	cmp	r1, #10
 8003be4:	d102      	bne.n	8003bec <__sfputc_r+0x1c>
 8003be6:	bc10      	pop	{r4}
 8003be8:	f000 baf0 	b.w	80041cc <__swbuf_r>
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	1c58      	adds	r0, r3, #1
 8003bf0:	6010      	str	r0, [r2, #0]
 8003bf2:	7019      	strb	r1, [r3, #0]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	bc10      	pop	{r4}
 8003bf8:	4770      	bx	lr

08003bfa <__sfputs_r>:
 8003bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfc:	4606      	mov	r6, r0
 8003bfe:	460f      	mov	r7, r1
 8003c00:	4614      	mov	r4, r2
 8003c02:	18d5      	adds	r5, r2, r3
 8003c04:	42ac      	cmp	r4, r5
 8003c06:	d101      	bne.n	8003c0c <__sfputs_r+0x12>
 8003c08:	2000      	movs	r0, #0
 8003c0a:	e007      	b.n	8003c1c <__sfputs_r+0x22>
 8003c0c:	463a      	mov	r2, r7
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c14:	f7ff ffdc 	bl	8003bd0 <__sfputc_r>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	d1f3      	bne.n	8003c04 <__sfputs_r+0xa>
 8003c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c20 <_vfiprintf_r>:
 8003c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c24:	460d      	mov	r5, r1
 8003c26:	4614      	mov	r4, r2
 8003c28:	4698      	mov	r8, r3
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	b09d      	sub	sp, #116	; 0x74
 8003c2e:	b118      	cbz	r0, 8003c38 <_vfiprintf_r+0x18>
 8003c30:	6983      	ldr	r3, [r0, #24]
 8003c32:	b90b      	cbnz	r3, 8003c38 <_vfiprintf_r+0x18>
 8003c34:	f000 fca8 	bl	8004588 <__sinit>
 8003c38:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <_vfiprintf_r+0x240>)
 8003c3a:	429d      	cmp	r5, r3
 8003c3c:	d11b      	bne.n	8003c76 <_vfiprintf_r+0x56>
 8003c3e:	6875      	ldr	r5, [r6, #4]
 8003c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c42:	07d9      	lsls	r1, r3, #31
 8003c44:	d405      	bmi.n	8003c52 <_vfiprintf_r+0x32>
 8003c46:	89ab      	ldrh	r3, [r5, #12]
 8003c48:	059a      	lsls	r2, r3, #22
 8003c4a:	d402      	bmi.n	8003c52 <_vfiprintf_r+0x32>
 8003c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c4e:	f000 fd39 	bl	80046c4 <__retarget_lock_acquire_recursive>
 8003c52:	89ab      	ldrh	r3, [r5, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	d501      	bpl.n	8003c5c <_vfiprintf_r+0x3c>
 8003c58:	692b      	ldr	r3, [r5, #16]
 8003c5a:	b9eb      	cbnz	r3, 8003c98 <_vfiprintf_r+0x78>
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f000 fb06 	bl	8004270 <__swsetup_r>
 8003c64:	b1c0      	cbz	r0, 8003c98 <_vfiprintf_r+0x78>
 8003c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c68:	07dc      	lsls	r4, r3, #31
 8003c6a:	d50e      	bpl.n	8003c8a <_vfiprintf_r+0x6a>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	b01d      	add	sp, #116	; 0x74
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	4b7b      	ldr	r3, [pc, #492]	; (8003e64 <_vfiprintf_r+0x244>)
 8003c78:	429d      	cmp	r5, r3
 8003c7a:	d101      	bne.n	8003c80 <_vfiprintf_r+0x60>
 8003c7c:	68b5      	ldr	r5, [r6, #8]
 8003c7e:	e7df      	b.n	8003c40 <_vfiprintf_r+0x20>
 8003c80:	4b79      	ldr	r3, [pc, #484]	; (8003e68 <_vfiprintf_r+0x248>)
 8003c82:	429d      	cmp	r5, r3
 8003c84:	bf08      	it	eq
 8003c86:	68f5      	ldreq	r5, [r6, #12]
 8003c88:	e7da      	b.n	8003c40 <_vfiprintf_r+0x20>
 8003c8a:	89ab      	ldrh	r3, [r5, #12]
 8003c8c:	0598      	lsls	r0, r3, #22
 8003c8e:	d4ed      	bmi.n	8003c6c <_vfiprintf_r+0x4c>
 8003c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c92:	f000 fd18 	bl	80046c6 <__retarget_lock_release_recursive>
 8003c96:	e7e9      	b.n	8003c6c <_vfiprintf_r+0x4c>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c9c:	2320      	movs	r3, #32
 8003c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ca2:	2330      	movs	r3, #48	; 0x30
 8003ca4:	f04f 0901 	mov.w	r9, #1
 8003ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003e6c <_vfiprintf_r+0x24c>
 8003cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	469a      	mov	sl, r3
 8003cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cbc:	b10a      	cbz	r2, 8003cc2 <_vfiprintf_r+0xa2>
 8003cbe:	2a25      	cmp	r2, #37	; 0x25
 8003cc0:	d1f9      	bne.n	8003cb6 <_vfiprintf_r+0x96>
 8003cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8003cc6:	d00b      	beq.n	8003ce0 <_vfiprintf_r+0xc0>
 8003cc8:	465b      	mov	r3, fp
 8003cca:	4622      	mov	r2, r4
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f7ff ff93 	bl	8003bfa <__sfputs_r>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	f000 80aa 	beq.w	8003e2e <_vfiprintf_r+0x20e>
 8003cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cdc:	445a      	add	r2, fp
 8003cde:	9209      	str	r2, [sp, #36]	; 0x24
 8003ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a2 	beq.w	8003e2e <_vfiprintf_r+0x20e>
 8003cea:	2300      	movs	r3, #0
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cf4:	f10a 0a01 	add.w	sl, sl, #1
 8003cf8:	9304      	str	r3, [sp, #16]
 8003cfa:	9307      	str	r3, [sp, #28]
 8003cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d00:	931a      	str	r3, [sp, #104]	; 0x68
 8003d02:	4654      	mov	r4, sl
 8003d04:	2205      	movs	r2, #5
 8003d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d0a:	4858      	ldr	r0, [pc, #352]	; (8003e6c <_vfiprintf_r+0x24c>)
 8003d0c:	f000 fd42 	bl	8004794 <memchr>
 8003d10:	9a04      	ldr	r2, [sp, #16]
 8003d12:	b9d8      	cbnz	r0, 8003d4c <_vfiprintf_r+0x12c>
 8003d14:	06d1      	lsls	r1, r2, #27
 8003d16:	bf44      	itt	mi
 8003d18:	2320      	movmi	r3, #32
 8003d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d1e:	0713      	lsls	r3, r2, #28
 8003d20:	bf44      	itt	mi
 8003d22:	232b      	movmi	r3, #43	; 0x2b
 8003d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d28:	f89a 3000 	ldrb.w	r3, [sl]
 8003d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d2e:	d015      	beq.n	8003d5c <_vfiprintf_r+0x13c>
 8003d30:	4654      	mov	r4, sl
 8003d32:	2000      	movs	r0, #0
 8003d34:	f04f 0c0a 	mov.w	ip, #10
 8003d38:	9a07      	ldr	r2, [sp, #28]
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d40:	3b30      	subs	r3, #48	; 0x30
 8003d42:	2b09      	cmp	r3, #9
 8003d44:	d94e      	bls.n	8003de4 <_vfiprintf_r+0x1c4>
 8003d46:	b1b0      	cbz	r0, 8003d76 <_vfiprintf_r+0x156>
 8003d48:	9207      	str	r2, [sp, #28]
 8003d4a:	e014      	b.n	8003d76 <_vfiprintf_r+0x156>
 8003d4c:	eba0 0308 	sub.w	r3, r0, r8
 8003d50:	fa09 f303 	lsl.w	r3, r9, r3
 8003d54:	4313      	orrs	r3, r2
 8003d56:	46a2      	mov	sl, r4
 8003d58:	9304      	str	r3, [sp, #16]
 8003d5a:	e7d2      	b.n	8003d02 <_vfiprintf_r+0xe2>
 8003d5c:	9b03      	ldr	r3, [sp, #12]
 8003d5e:	1d19      	adds	r1, r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	9103      	str	r1, [sp, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bfbb      	ittet	lt
 8003d68:	425b      	neglt	r3, r3
 8003d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8003d6e:	9307      	strge	r3, [sp, #28]
 8003d70:	9307      	strlt	r3, [sp, #28]
 8003d72:	bfb8      	it	lt
 8003d74:	9204      	strlt	r2, [sp, #16]
 8003d76:	7823      	ldrb	r3, [r4, #0]
 8003d78:	2b2e      	cmp	r3, #46	; 0x2e
 8003d7a:	d10c      	bne.n	8003d96 <_vfiprintf_r+0x176>
 8003d7c:	7863      	ldrb	r3, [r4, #1]
 8003d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d80:	d135      	bne.n	8003dee <_vfiprintf_r+0x1ce>
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	3402      	adds	r4, #2
 8003d86:	1d1a      	adds	r2, r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	9203      	str	r2, [sp, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bfb8      	it	lt
 8003d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d94:	9305      	str	r3, [sp, #20]
 8003d96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003e70 <_vfiprintf_r+0x250>
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	4650      	mov	r0, sl
 8003d9e:	7821      	ldrb	r1, [r4, #0]
 8003da0:	f000 fcf8 	bl	8004794 <memchr>
 8003da4:	b140      	cbz	r0, 8003db8 <_vfiprintf_r+0x198>
 8003da6:	2340      	movs	r3, #64	; 0x40
 8003da8:	eba0 000a 	sub.w	r0, r0, sl
 8003dac:	fa03 f000 	lsl.w	r0, r3, r0
 8003db0:	9b04      	ldr	r3, [sp, #16]
 8003db2:	3401      	adds	r4, #1
 8003db4:	4303      	orrs	r3, r0
 8003db6:	9304      	str	r3, [sp, #16]
 8003db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dbc:	2206      	movs	r2, #6
 8003dbe:	482d      	ldr	r0, [pc, #180]	; (8003e74 <_vfiprintf_r+0x254>)
 8003dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dc4:	f000 fce6 	bl	8004794 <memchr>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d03f      	beq.n	8003e4c <_vfiprintf_r+0x22c>
 8003dcc:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <_vfiprintf_r+0x258>)
 8003dce:	bb1b      	cbnz	r3, 8003e18 <_vfiprintf_r+0x1f8>
 8003dd0:	9b03      	ldr	r3, [sp, #12]
 8003dd2:	3307      	adds	r3, #7
 8003dd4:	f023 0307 	bic.w	r3, r3, #7
 8003dd8:	3308      	adds	r3, #8
 8003dda:	9303      	str	r3, [sp, #12]
 8003ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dde:	443b      	add	r3, r7
 8003de0:	9309      	str	r3, [sp, #36]	; 0x24
 8003de2:	e767      	b.n	8003cb4 <_vfiprintf_r+0x94>
 8003de4:	460c      	mov	r4, r1
 8003de6:	2001      	movs	r0, #1
 8003de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dec:	e7a5      	b.n	8003d3a <_vfiprintf_r+0x11a>
 8003dee:	2300      	movs	r3, #0
 8003df0:	f04f 0c0a 	mov.w	ip, #10
 8003df4:	4619      	mov	r1, r3
 8003df6:	3401      	adds	r4, #1
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e00:	3a30      	subs	r2, #48	; 0x30
 8003e02:	2a09      	cmp	r2, #9
 8003e04:	d903      	bls.n	8003e0e <_vfiprintf_r+0x1ee>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0c5      	beq.n	8003d96 <_vfiprintf_r+0x176>
 8003e0a:	9105      	str	r1, [sp, #20]
 8003e0c:	e7c3      	b.n	8003d96 <_vfiprintf_r+0x176>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	2301      	movs	r3, #1
 8003e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e16:	e7f0      	b.n	8003dfa <_vfiprintf_r+0x1da>
 8003e18:	ab03      	add	r3, sp, #12
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	462a      	mov	r2, r5
 8003e1e:	4630      	mov	r0, r6
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <_vfiprintf_r+0x25c>)
 8003e22:	a904      	add	r1, sp, #16
 8003e24:	f3af 8000 	nop.w
 8003e28:	4607      	mov	r7, r0
 8003e2a:	1c78      	adds	r0, r7, #1
 8003e2c:	d1d6      	bne.n	8003ddc <_vfiprintf_r+0x1bc>
 8003e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e30:	07d9      	lsls	r1, r3, #31
 8003e32:	d405      	bmi.n	8003e40 <_vfiprintf_r+0x220>
 8003e34:	89ab      	ldrh	r3, [r5, #12]
 8003e36:	059a      	lsls	r2, r3, #22
 8003e38:	d402      	bmi.n	8003e40 <_vfiprintf_r+0x220>
 8003e3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e3c:	f000 fc43 	bl	80046c6 <__retarget_lock_release_recursive>
 8003e40:	89ab      	ldrh	r3, [r5, #12]
 8003e42:	065b      	lsls	r3, r3, #25
 8003e44:	f53f af12 	bmi.w	8003c6c <_vfiprintf_r+0x4c>
 8003e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e4a:	e711      	b.n	8003c70 <_vfiprintf_r+0x50>
 8003e4c:	ab03      	add	r3, sp, #12
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	462a      	mov	r2, r5
 8003e52:	4630      	mov	r0, r6
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <_vfiprintf_r+0x25c>)
 8003e56:	a904      	add	r1, sp, #16
 8003e58:	f000 f882 	bl	8003f60 <_printf_i>
 8003e5c:	e7e4      	b.n	8003e28 <_vfiprintf_r+0x208>
 8003e5e:	bf00      	nop
 8003e60:	08004c84 	.word	0x08004c84
 8003e64:	08004ca4 	.word	0x08004ca4
 8003e68:	08004c64 	.word	0x08004c64
 8003e6c:	08004c2e 	.word	0x08004c2e
 8003e70:	08004c34 	.word	0x08004c34
 8003e74:	08004c38 	.word	0x08004c38
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	08003bfb 	.word	0x08003bfb

08003e80 <_printf_common>:
 8003e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	4616      	mov	r6, r2
 8003e86:	4699      	mov	r9, r3
 8003e88:	688a      	ldr	r2, [r1, #8]
 8003e8a:	690b      	ldr	r3, [r1, #16]
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	bfb8      	it	lt
 8003e92:	4613      	movlt	r3, r2
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ea0:	b10a      	cbz	r2, 8003ea6 <_printf_common+0x26>
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	6033      	str	r3, [r6, #0]
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	0699      	lsls	r1, r3, #26
 8003eaa:	bf42      	ittt	mi
 8003eac:	6833      	ldrmi	r3, [r6, #0]
 8003eae:	3302      	addmi	r3, #2
 8003eb0:	6033      	strmi	r3, [r6, #0]
 8003eb2:	6825      	ldr	r5, [r4, #0]
 8003eb4:	f015 0506 	ands.w	r5, r5, #6
 8003eb8:	d106      	bne.n	8003ec8 <_printf_common+0x48>
 8003eba:	f104 0a19 	add.w	sl, r4, #25
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	6832      	ldr	r2, [r6, #0]
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	42ab      	cmp	r3, r5
 8003ec6:	dc28      	bgt.n	8003f1a <_printf_common+0x9a>
 8003ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ecc:	1e13      	subs	r3, r2, #0
 8003ece:	6822      	ldr	r2, [r4, #0]
 8003ed0:	bf18      	it	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	0692      	lsls	r2, r2, #26
 8003ed6:	d42d      	bmi.n	8003f34 <_printf_common+0xb4>
 8003ed8:	4649      	mov	r1, r9
 8003eda:	4638      	mov	r0, r7
 8003edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee0:	47c0      	blx	r8
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d020      	beq.n	8003f28 <_printf_common+0xa8>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	68e5      	ldr	r5, [r4, #12]
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	bf18      	it	ne
 8003ef2:	2500      	movne	r5, #0
 8003ef4:	6832      	ldr	r2, [r6, #0]
 8003ef6:	f04f 0600 	mov.w	r6, #0
 8003efa:	68a3      	ldr	r3, [r4, #8]
 8003efc:	bf08      	it	eq
 8003efe:	1aad      	subeq	r5, r5, r2
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	bf08      	it	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bfc4      	itt	gt
 8003f0c:	1a9b      	subgt	r3, r3, r2
 8003f0e:	18ed      	addgt	r5, r5, r3
 8003f10:	341a      	adds	r4, #26
 8003f12:	42b5      	cmp	r5, r6
 8003f14:	d11a      	bne.n	8003f4c <_printf_common+0xcc>
 8003f16:	2000      	movs	r0, #0
 8003f18:	e008      	b.n	8003f2c <_printf_common+0xac>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4652      	mov	r2, sl
 8003f1e:	4649      	mov	r1, r9
 8003f20:	4638      	mov	r0, r7
 8003f22:	47c0      	blx	r8
 8003f24:	3001      	adds	r0, #1
 8003f26:	d103      	bne.n	8003f30 <_printf_common+0xb0>
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f30:	3501      	adds	r5, #1
 8003f32:	e7c4      	b.n	8003ebe <_printf_common+0x3e>
 8003f34:	2030      	movs	r0, #48	; 0x30
 8003f36:	18e1      	adds	r1, r4, r3
 8003f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f42:	4422      	add	r2, r4
 8003f44:	3302      	adds	r3, #2
 8003f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4a:	e7c5      	b.n	8003ed8 <_printf_common+0x58>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	4622      	mov	r2, r4
 8003f50:	4649      	mov	r1, r9
 8003f52:	4638      	mov	r0, r7
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d0e6      	beq.n	8003f28 <_printf_common+0xa8>
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7d9      	b.n	8003f12 <_printf_common+0x92>
	...

08003f60 <_printf_i>:
 8003f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f64:	7e0f      	ldrb	r7, [r1, #24]
 8003f66:	4691      	mov	r9, r2
 8003f68:	2f78      	cmp	r7, #120	; 0x78
 8003f6a:	4680      	mov	r8, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	469a      	mov	sl, r3
 8003f70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f76:	d807      	bhi.n	8003f88 <_printf_i+0x28>
 8003f78:	2f62      	cmp	r7, #98	; 0x62
 8003f7a:	d80a      	bhi.n	8003f92 <_printf_i+0x32>
 8003f7c:	2f00      	cmp	r7, #0
 8003f7e:	f000 80d9 	beq.w	8004134 <_printf_i+0x1d4>
 8003f82:	2f58      	cmp	r7, #88	; 0x58
 8003f84:	f000 80a4 	beq.w	80040d0 <_printf_i+0x170>
 8003f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f90:	e03a      	b.n	8004008 <_printf_i+0xa8>
 8003f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f96:	2b15      	cmp	r3, #21
 8003f98:	d8f6      	bhi.n	8003f88 <_printf_i+0x28>
 8003f9a:	a101      	add	r1, pc, #4	; (adr r1, 8003fa0 <_printf_i+0x40>)
 8003f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa0:	08003ff9 	.word	0x08003ff9
 8003fa4:	0800400d 	.word	0x0800400d
 8003fa8:	08003f89 	.word	0x08003f89
 8003fac:	08003f89 	.word	0x08003f89
 8003fb0:	08003f89 	.word	0x08003f89
 8003fb4:	08003f89 	.word	0x08003f89
 8003fb8:	0800400d 	.word	0x0800400d
 8003fbc:	08003f89 	.word	0x08003f89
 8003fc0:	08003f89 	.word	0x08003f89
 8003fc4:	08003f89 	.word	0x08003f89
 8003fc8:	08003f89 	.word	0x08003f89
 8003fcc:	0800411b 	.word	0x0800411b
 8003fd0:	0800403d 	.word	0x0800403d
 8003fd4:	080040fd 	.word	0x080040fd
 8003fd8:	08003f89 	.word	0x08003f89
 8003fdc:	08003f89 	.word	0x08003f89
 8003fe0:	0800413d 	.word	0x0800413d
 8003fe4:	08003f89 	.word	0x08003f89
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	08003f89 	.word	0x08003f89
 8003ff0:	08003f89 	.word	0x08003f89
 8003ff4:	08004105 	.word	0x08004105
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	1d1a      	adds	r2, r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	602a      	str	r2, [r5, #0]
 8004000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004008:	2301      	movs	r3, #1
 800400a:	e0a4      	b.n	8004156 <_printf_i+0x1f6>
 800400c:	6820      	ldr	r0, [r4, #0]
 800400e:	6829      	ldr	r1, [r5, #0]
 8004010:	0606      	lsls	r6, r0, #24
 8004012:	f101 0304 	add.w	r3, r1, #4
 8004016:	d50a      	bpl.n	800402e <_printf_i+0xce>
 8004018:	680e      	ldr	r6, [r1, #0]
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	2e00      	cmp	r6, #0
 800401e:	da03      	bge.n	8004028 <_printf_i+0xc8>
 8004020:	232d      	movs	r3, #45	; 0x2d
 8004022:	4276      	negs	r6, r6
 8004024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004028:	230a      	movs	r3, #10
 800402a:	485e      	ldr	r0, [pc, #376]	; (80041a4 <_printf_i+0x244>)
 800402c:	e019      	b.n	8004062 <_printf_i+0x102>
 800402e:	680e      	ldr	r6, [r1, #0]
 8004030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	bf18      	it	ne
 8004038:	b236      	sxthne	r6, r6
 800403a:	e7ef      	b.n	800401c <_printf_i+0xbc>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	6029      	str	r1, [r5, #0]
 8004044:	0601      	lsls	r1, r0, #24
 8004046:	d501      	bpl.n	800404c <_printf_i+0xec>
 8004048:	681e      	ldr	r6, [r3, #0]
 800404a:	e002      	b.n	8004052 <_printf_i+0xf2>
 800404c:	0646      	lsls	r6, r0, #25
 800404e:	d5fb      	bpl.n	8004048 <_printf_i+0xe8>
 8004050:	881e      	ldrh	r6, [r3, #0]
 8004052:	2f6f      	cmp	r7, #111	; 0x6f
 8004054:	bf0c      	ite	eq
 8004056:	2308      	moveq	r3, #8
 8004058:	230a      	movne	r3, #10
 800405a:	4852      	ldr	r0, [pc, #328]	; (80041a4 <_printf_i+0x244>)
 800405c:	2100      	movs	r1, #0
 800405e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004062:	6865      	ldr	r5, [r4, #4]
 8004064:	2d00      	cmp	r5, #0
 8004066:	bfa8      	it	ge
 8004068:	6821      	ldrge	r1, [r4, #0]
 800406a:	60a5      	str	r5, [r4, #8]
 800406c:	bfa4      	itt	ge
 800406e:	f021 0104 	bicge.w	r1, r1, #4
 8004072:	6021      	strge	r1, [r4, #0]
 8004074:	b90e      	cbnz	r6, 800407a <_printf_i+0x11a>
 8004076:	2d00      	cmp	r5, #0
 8004078:	d04d      	beq.n	8004116 <_printf_i+0x1b6>
 800407a:	4615      	mov	r5, r2
 800407c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004080:	fb03 6711 	mls	r7, r3, r1, r6
 8004084:	5dc7      	ldrb	r7, [r0, r7]
 8004086:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800408a:	4637      	mov	r7, r6
 800408c:	42bb      	cmp	r3, r7
 800408e:	460e      	mov	r6, r1
 8004090:	d9f4      	bls.n	800407c <_printf_i+0x11c>
 8004092:	2b08      	cmp	r3, #8
 8004094:	d10b      	bne.n	80040ae <_printf_i+0x14e>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	07de      	lsls	r6, r3, #31
 800409a:	d508      	bpl.n	80040ae <_printf_i+0x14e>
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	6861      	ldr	r1, [r4, #4]
 80040a0:	4299      	cmp	r1, r3
 80040a2:	bfde      	ittt	le
 80040a4:	2330      	movle	r3, #48	; 0x30
 80040a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ae:	1b52      	subs	r2, r2, r5
 80040b0:	6122      	str	r2, [r4, #16]
 80040b2:	464b      	mov	r3, r9
 80040b4:	4621      	mov	r1, r4
 80040b6:	4640      	mov	r0, r8
 80040b8:	f8cd a000 	str.w	sl, [sp]
 80040bc:	aa03      	add	r2, sp, #12
 80040be:	f7ff fedf 	bl	8003e80 <_printf_common>
 80040c2:	3001      	adds	r0, #1
 80040c4:	d14c      	bne.n	8004160 <_printf_i+0x200>
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	b004      	add	sp, #16
 80040cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d0:	4834      	ldr	r0, [pc, #208]	; (80041a4 <_printf_i+0x244>)
 80040d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040d6:	6829      	ldr	r1, [r5, #0]
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	f851 6b04 	ldr.w	r6, [r1], #4
 80040de:	6029      	str	r1, [r5, #0]
 80040e0:	061d      	lsls	r5, r3, #24
 80040e2:	d514      	bpl.n	800410e <_printf_i+0x1ae>
 80040e4:	07df      	lsls	r7, r3, #31
 80040e6:	bf44      	itt	mi
 80040e8:	f043 0320 	orrmi.w	r3, r3, #32
 80040ec:	6023      	strmi	r3, [r4, #0]
 80040ee:	b91e      	cbnz	r6, 80040f8 <_printf_i+0x198>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	f023 0320 	bic.w	r3, r3, #32
 80040f6:	6023      	str	r3, [r4, #0]
 80040f8:	2310      	movs	r3, #16
 80040fa:	e7af      	b.n	800405c <_printf_i+0xfc>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f043 0320 	orr.w	r3, r3, #32
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	2378      	movs	r3, #120	; 0x78
 8004106:	4828      	ldr	r0, [pc, #160]	; (80041a8 <_printf_i+0x248>)
 8004108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800410c:	e7e3      	b.n	80040d6 <_printf_i+0x176>
 800410e:	0659      	lsls	r1, r3, #25
 8004110:	bf48      	it	mi
 8004112:	b2b6      	uxthmi	r6, r6
 8004114:	e7e6      	b.n	80040e4 <_printf_i+0x184>
 8004116:	4615      	mov	r5, r2
 8004118:	e7bb      	b.n	8004092 <_printf_i+0x132>
 800411a:	682b      	ldr	r3, [r5, #0]
 800411c:	6826      	ldr	r6, [r4, #0]
 800411e:	1d18      	adds	r0, r3, #4
 8004120:	6961      	ldr	r1, [r4, #20]
 8004122:	6028      	str	r0, [r5, #0]
 8004124:	0635      	lsls	r5, r6, #24
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	d501      	bpl.n	800412e <_printf_i+0x1ce>
 800412a:	6019      	str	r1, [r3, #0]
 800412c:	e002      	b.n	8004134 <_printf_i+0x1d4>
 800412e:	0670      	lsls	r0, r6, #25
 8004130:	d5fb      	bpl.n	800412a <_printf_i+0x1ca>
 8004132:	8019      	strh	r1, [r3, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	4615      	mov	r5, r2
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	e7ba      	b.n	80040b2 <_printf_i+0x152>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	2100      	movs	r1, #0
 8004140:	1d1a      	adds	r2, r3, #4
 8004142:	602a      	str	r2, [r5, #0]
 8004144:	681d      	ldr	r5, [r3, #0]
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	4628      	mov	r0, r5
 800414a:	f000 fb23 	bl	8004794 <memchr>
 800414e:	b108      	cbz	r0, 8004154 <_printf_i+0x1f4>
 8004150:	1b40      	subs	r0, r0, r5
 8004152:	6060      	str	r0, [r4, #4]
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	2300      	movs	r3, #0
 800415a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800415e:	e7a8      	b.n	80040b2 <_printf_i+0x152>
 8004160:	462a      	mov	r2, r5
 8004162:	4649      	mov	r1, r9
 8004164:	4640      	mov	r0, r8
 8004166:	6923      	ldr	r3, [r4, #16]
 8004168:	47d0      	blx	sl
 800416a:	3001      	adds	r0, #1
 800416c:	d0ab      	beq.n	80040c6 <_printf_i+0x166>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	079b      	lsls	r3, r3, #30
 8004172:	d413      	bmi.n	800419c <_printf_i+0x23c>
 8004174:	68e0      	ldr	r0, [r4, #12]
 8004176:	9b03      	ldr	r3, [sp, #12]
 8004178:	4298      	cmp	r0, r3
 800417a:	bfb8      	it	lt
 800417c:	4618      	movlt	r0, r3
 800417e:	e7a4      	b.n	80040ca <_printf_i+0x16a>
 8004180:	2301      	movs	r3, #1
 8004182:	4632      	mov	r2, r6
 8004184:	4649      	mov	r1, r9
 8004186:	4640      	mov	r0, r8
 8004188:	47d0      	blx	sl
 800418a:	3001      	adds	r0, #1
 800418c:	d09b      	beq.n	80040c6 <_printf_i+0x166>
 800418e:	3501      	adds	r5, #1
 8004190:	68e3      	ldr	r3, [r4, #12]
 8004192:	9903      	ldr	r1, [sp, #12]
 8004194:	1a5b      	subs	r3, r3, r1
 8004196:	42ab      	cmp	r3, r5
 8004198:	dcf2      	bgt.n	8004180 <_printf_i+0x220>
 800419a:	e7eb      	b.n	8004174 <_printf_i+0x214>
 800419c:	2500      	movs	r5, #0
 800419e:	f104 0619 	add.w	r6, r4, #25
 80041a2:	e7f5      	b.n	8004190 <_printf_i+0x230>
 80041a4:	08004c3f 	.word	0x08004c3f
 80041a8:	08004c50 	.word	0x08004c50

080041ac <_sbrk_r>:
 80041ac:	b538      	push	{r3, r4, r5, lr}
 80041ae:	2300      	movs	r3, #0
 80041b0:	4d05      	ldr	r5, [pc, #20]	; (80041c8 <_sbrk_r+0x1c>)
 80041b2:	4604      	mov	r4, r0
 80041b4:	4608      	mov	r0, r1
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	f7fc fc24 	bl	8000a04 <_sbrk>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d102      	bne.n	80041c6 <_sbrk_r+0x1a>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b103      	cbz	r3, 80041c6 <_sbrk_r+0x1a>
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	20000458 	.word	0x20000458

080041cc <__swbuf_r>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	460e      	mov	r6, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	4605      	mov	r5, r0
 80041d4:	b118      	cbz	r0, 80041de <__swbuf_r+0x12>
 80041d6:	6983      	ldr	r3, [r0, #24]
 80041d8:	b90b      	cbnz	r3, 80041de <__swbuf_r+0x12>
 80041da:	f000 f9d5 	bl	8004588 <__sinit>
 80041de:	4b21      	ldr	r3, [pc, #132]	; (8004264 <__swbuf_r+0x98>)
 80041e0:	429c      	cmp	r4, r3
 80041e2:	d12b      	bne.n	800423c <__swbuf_r+0x70>
 80041e4:	686c      	ldr	r4, [r5, #4]
 80041e6:	69a3      	ldr	r3, [r4, #24]
 80041e8:	60a3      	str	r3, [r4, #8]
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	071a      	lsls	r2, r3, #28
 80041ee:	d52f      	bpl.n	8004250 <__swbuf_r+0x84>
 80041f0:	6923      	ldr	r3, [r4, #16]
 80041f2:	b36b      	cbz	r3, 8004250 <__swbuf_r+0x84>
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	b2f6      	uxtb	r6, r6
 80041fa:	1ac0      	subs	r0, r0, r3
 80041fc:	6963      	ldr	r3, [r4, #20]
 80041fe:	4637      	mov	r7, r6
 8004200:	4283      	cmp	r3, r0
 8004202:	dc04      	bgt.n	800420e <__swbuf_r+0x42>
 8004204:	4621      	mov	r1, r4
 8004206:	4628      	mov	r0, r5
 8004208:	f000 f92a 	bl	8004460 <_fflush_r>
 800420c:	bb30      	cbnz	r0, 800425c <__swbuf_r+0x90>
 800420e:	68a3      	ldr	r3, [r4, #8]
 8004210:	3001      	adds	r0, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	60a3      	str	r3, [r4, #8]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	6022      	str	r2, [r4, #0]
 800421c:	701e      	strb	r6, [r3, #0]
 800421e:	6963      	ldr	r3, [r4, #20]
 8004220:	4283      	cmp	r3, r0
 8004222:	d004      	beq.n	800422e <__swbuf_r+0x62>
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	07db      	lsls	r3, r3, #31
 8004228:	d506      	bpl.n	8004238 <__swbuf_r+0x6c>
 800422a:	2e0a      	cmp	r6, #10
 800422c:	d104      	bne.n	8004238 <__swbuf_r+0x6c>
 800422e:	4621      	mov	r1, r4
 8004230:	4628      	mov	r0, r5
 8004232:	f000 f915 	bl	8004460 <_fflush_r>
 8004236:	b988      	cbnz	r0, 800425c <__swbuf_r+0x90>
 8004238:	4638      	mov	r0, r7
 800423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <__swbuf_r+0x9c>)
 800423e:	429c      	cmp	r4, r3
 8004240:	d101      	bne.n	8004246 <__swbuf_r+0x7a>
 8004242:	68ac      	ldr	r4, [r5, #8]
 8004244:	e7cf      	b.n	80041e6 <__swbuf_r+0x1a>
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <__swbuf_r+0xa0>)
 8004248:	429c      	cmp	r4, r3
 800424a:	bf08      	it	eq
 800424c:	68ec      	ldreq	r4, [r5, #12]
 800424e:	e7ca      	b.n	80041e6 <__swbuf_r+0x1a>
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 f80c 	bl	8004270 <__swsetup_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	d0cb      	beq.n	80041f4 <__swbuf_r+0x28>
 800425c:	f04f 37ff 	mov.w	r7, #4294967295
 8004260:	e7ea      	b.n	8004238 <__swbuf_r+0x6c>
 8004262:	bf00      	nop
 8004264:	08004c84 	.word	0x08004c84
 8004268:	08004ca4 	.word	0x08004ca4
 800426c:	08004c64 	.word	0x08004c64

08004270 <__swsetup_r>:
 8004270:	4b32      	ldr	r3, [pc, #200]	; (800433c <__swsetup_r+0xcc>)
 8004272:	b570      	push	{r4, r5, r6, lr}
 8004274:	681d      	ldr	r5, [r3, #0]
 8004276:	4606      	mov	r6, r0
 8004278:	460c      	mov	r4, r1
 800427a:	b125      	cbz	r5, 8004286 <__swsetup_r+0x16>
 800427c:	69ab      	ldr	r3, [r5, #24]
 800427e:	b913      	cbnz	r3, 8004286 <__swsetup_r+0x16>
 8004280:	4628      	mov	r0, r5
 8004282:	f000 f981 	bl	8004588 <__sinit>
 8004286:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <__swsetup_r+0xd0>)
 8004288:	429c      	cmp	r4, r3
 800428a:	d10f      	bne.n	80042ac <__swsetup_r+0x3c>
 800428c:	686c      	ldr	r4, [r5, #4]
 800428e:	89a3      	ldrh	r3, [r4, #12]
 8004290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004294:	0719      	lsls	r1, r3, #28
 8004296:	d42c      	bmi.n	80042f2 <__swsetup_r+0x82>
 8004298:	06dd      	lsls	r5, r3, #27
 800429a:	d411      	bmi.n	80042c0 <__swsetup_r+0x50>
 800429c:	2309      	movs	r3, #9
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	81a3      	strh	r3, [r4, #12]
 80042aa:	e03e      	b.n	800432a <__swsetup_r+0xba>
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <__swsetup_r+0xd4>)
 80042ae:	429c      	cmp	r4, r3
 80042b0:	d101      	bne.n	80042b6 <__swsetup_r+0x46>
 80042b2:	68ac      	ldr	r4, [r5, #8]
 80042b4:	e7eb      	b.n	800428e <__swsetup_r+0x1e>
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <__swsetup_r+0xd8>)
 80042b8:	429c      	cmp	r4, r3
 80042ba:	bf08      	it	eq
 80042bc:	68ec      	ldreq	r4, [r5, #12]
 80042be:	e7e6      	b.n	800428e <__swsetup_r+0x1e>
 80042c0:	0758      	lsls	r0, r3, #29
 80042c2:	d512      	bpl.n	80042ea <__swsetup_r+0x7a>
 80042c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042c6:	b141      	cbz	r1, 80042da <__swsetup_r+0x6a>
 80042c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042cc:	4299      	cmp	r1, r3
 80042ce:	d002      	beq.n	80042d6 <__swsetup_r+0x66>
 80042d0:	4630      	mov	r0, r6
 80042d2:	f7ff fa45 	bl	8003760 <_free_r>
 80042d6:	2300      	movs	r3, #0
 80042d8:	6363      	str	r3, [r4, #52]	; 0x34
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	2300      	movs	r3, #0
 80042e4:	6063      	str	r3, [r4, #4]
 80042e6:	6923      	ldr	r3, [r4, #16]
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	f043 0308 	orr.w	r3, r3, #8
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	b94b      	cbnz	r3, 800430a <__swsetup_r+0x9a>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d003      	beq.n	800430a <__swsetup_r+0x9a>
 8004302:	4621      	mov	r1, r4
 8004304:	4630      	mov	r0, r6
 8004306:	f000 fa05 	bl	8004714 <__smakebuf_r>
 800430a:	89a0      	ldrh	r0, [r4, #12]
 800430c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004310:	f010 0301 	ands.w	r3, r0, #1
 8004314:	d00a      	beq.n	800432c <__swsetup_r+0xbc>
 8004316:	2300      	movs	r3, #0
 8004318:	60a3      	str	r3, [r4, #8]
 800431a:	6963      	ldr	r3, [r4, #20]
 800431c:	425b      	negs	r3, r3
 800431e:	61a3      	str	r3, [r4, #24]
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	b943      	cbnz	r3, 8004336 <__swsetup_r+0xc6>
 8004324:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004328:	d1ba      	bne.n	80042a0 <__swsetup_r+0x30>
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	0781      	lsls	r1, r0, #30
 800432e:	bf58      	it	pl
 8004330:	6963      	ldrpl	r3, [r4, #20]
 8004332:	60a3      	str	r3, [r4, #8]
 8004334:	e7f4      	b.n	8004320 <__swsetup_r+0xb0>
 8004336:	2000      	movs	r0, #0
 8004338:	e7f7      	b.n	800432a <__swsetup_r+0xba>
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c
 8004340:	08004c84 	.word	0x08004c84
 8004344:	08004ca4 	.word	0x08004ca4
 8004348:	08004c64 	.word	0x08004c64

0800434c <abort>:
 800434c:	2006      	movs	r0, #6
 800434e:	b508      	push	{r3, lr}
 8004350:	f000 faba 	bl	80048c8 <raise>
 8004354:	2001      	movs	r0, #1
 8004356:	f7fc fae2 	bl	800091e <_exit>
	...

0800435c <__sflush_r>:
 800435c:	898a      	ldrh	r2, [r1, #12]
 800435e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004360:	4605      	mov	r5, r0
 8004362:	0710      	lsls	r0, r2, #28
 8004364:	460c      	mov	r4, r1
 8004366:	d457      	bmi.n	8004418 <__sflush_r+0xbc>
 8004368:	684b      	ldr	r3, [r1, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	dc04      	bgt.n	8004378 <__sflush_r+0x1c>
 800436e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	dc01      	bgt.n	8004378 <__sflush_r+0x1c>
 8004374:	2000      	movs	r0, #0
 8004376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800437a:	2e00      	cmp	r6, #0
 800437c:	d0fa      	beq.n	8004374 <__sflush_r+0x18>
 800437e:	2300      	movs	r3, #0
 8004380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004384:	682f      	ldr	r7, [r5, #0]
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	d032      	beq.n	80043f0 <__sflush_r+0x94>
 800438a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	075a      	lsls	r2, r3, #29
 8004390:	d505      	bpl.n	800439e <__sflush_r+0x42>
 8004392:	6863      	ldr	r3, [r4, #4]
 8004394:	1ac0      	subs	r0, r0, r3
 8004396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004398:	b10b      	cbz	r3, 800439e <__sflush_r+0x42>
 800439a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800439c:	1ac0      	subs	r0, r0, r3
 800439e:	2300      	movs	r3, #0
 80043a0:	4602      	mov	r2, r0
 80043a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043a4:	4628      	mov	r0, r5
 80043a6:	6a21      	ldr	r1, [r4, #32]
 80043a8:	47b0      	blx	r6
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	d106      	bne.n	80043be <__sflush_r+0x62>
 80043b0:	6829      	ldr	r1, [r5, #0]
 80043b2:	291d      	cmp	r1, #29
 80043b4:	d82c      	bhi.n	8004410 <__sflush_r+0xb4>
 80043b6:	4a29      	ldr	r2, [pc, #164]	; (800445c <__sflush_r+0x100>)
 80043b8:	40ca      	lsrs	r2, r1
 80043ba:	07d6      	lsls	r6, r2, #31
 80043bc:	d528      	bpl.n	8004410 <__sflush_r+0xb4>
 80043be:	2200      	movs	r2, #0
 80043c0:	6062      	str	r2, [r4, #4]
 80043c2:	6922      	ldr	r2, [r4, #16]
 80043c4:	04d9      	lsls	r1, r3, #19
 80043c6:	6022      	str	r2, [r4, #0]
 80043c8:	d504      	bpl.n	80043d4 <__sflush_r+0x78>
 80043ca:	1c42      	adds	r2, r0, #1
 80043cc:	d101      	bne.n	80043d2 <__sflush_r+0x76>
 80043ce:	682b      	ldr	r3, [r5, #0]
 80043d0:	b903      	cbnz	r3, 80043d4 <__sflush_r+0x78>
 80043d2:	6560      	str	r0, [r4, #84]	; 0x54
 80043d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043d6:	602f      	str	r7, [r5, #0]
 80043d8:	2900      	cmp	r1, #0
 80043da:	d0cb      	beq.n	8004374 <__sflush_r+0x18>
 80043dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043e0:	4299      	cmp	r1, r3
 80043e2:	d002      	beq.n	80043ea <__sflush_r+0x8e>
 80043e4:	4628      	mov	r0, r5
 80043e6:	f7ff f9bb 	bl	8003760 <_free_r>
 80043ea:	2000      	movs	r0, #0
 80043ec:	6360      	str	r0, [r4, #52]	; 0x34
 80043ee:	e7c2      	b.n	8004376 <__sflush_r+0x1a>
 80043f0:	6a21      	ldr	r1, [r4, #32]
 80043f2:	2301      	movs	r3, #1
 80043f4:	4628      	mov	r0, r5
 80043f6:	47b0      	blx	r6
 80043f8:	1c41      	adds	r1, r0, #1
 80043fa:	d1c7      	bne.n	800438c <__sflush_r+0x30>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0c4      	beq.n	800438c <__sflush_r+0x30>
 8004402:	2b1d      	cmp	r3, #29
 8004404:	d001      	beq.n	800440a <__sflush_r+0xae>
 8004406:	2b16      	cmp	r3, #22
 8004408:	d101      	bne.n	800440e <__sflush_r+0xb2>
 800440a:	602f      	str	r7, [r5, #0]
 800440c:	e7b2      	b.n	8004374 <__sflush_r+0x18>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004414:	81a3      	strh	r3, [r4, #12]
 8004416:	e7ae      	b.n	8004376 <__sflush_r+0x1a>
 8004418:	690f      	ldr	r7, [r1, #16]
 800441a:	2f00      	cmp	r7, #0
 800441c:	d0aa      	beq.n	8004374 <__sflush_r+0x18>
 800441e:	0793      	lsls	r3, r2, #30
 8004420:	bf18      	it	ne
 8004422:	2300      	movne	r3, #0
 8004424:	680e      	ldr	r6, [r1, #0]
 8004426:	bf08      	it	eq
 8004428:	694b      	ldreq	r3, [r1, #20]
 800442a:	1bf6      	subs	r6, r6, r7
 800442c:	600f      	str	r7, [r1, #0]
 800442e:	608b      	str	r3, [r1, #8]
 8004430:	2e00      	cmp	r6, #0
 8004432:	dd9f      	ble.n	8004374 <__sflush_r+0x18>
 8004434:	4633      	mov	r3, r6
 8004436:	463a      	mov	r2, r7
 8004438:	4628      	mov	r0, r5
 800443a:	6a21      	ldr	r1, [r4, #32]
 800443c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004440:	47e0      	blx	ip
 8004442:	2800      	cmp	r0, #0
 8004444:	dc06      	bgt.n	8004454 <__sflush_r+0xf8>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	e790      	b.n	8004376 <__sflush_r+0x1a>
 8004454:	4407      	add	r7, r0
 8004456:	1a36      	subs	r6, r6, r0
 8004458:	e7ea      	b.n	8004430 <__sflush_r+0xd4>
 800445a:	bf00      	nop
 800445c:	20400001 	.word	0x20400001

08004460 <_fflush_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	690b      	ldr	r3, [r1, #16]
 8004464:	4605      	mov	r5, r0
 8004466:	460c      	mov	r4, r1
 8004468:	b913      	cbnz	r3, 8004470 <_fflush_r+0x10>
 800446a:	2500      	movs	r5, #0
 800446c:	4628      	mov	r0, r5
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	b118      	cbz	r0, 800447a <_fflush_r+0x1a>
 8004472:	6983      	ldr	r3, [r0, #24]
 8004474:	b90b      	cbnz	r3, 800447a <_fflush_r+0x1a>
 8004476:	f000 f887 	bl	8004588 <__sinit>
 800447a:	4b14      	ldr	r3, [pc, #80]	; (80044cc <_fflush_r+0x6c>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d11b      	bne.n	80044b8 <_fflush_r+0x58>
 8004480:	686c      	ldr	r4, [r5, #4]
 8004482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ef      	beq.n	800446a <_fflush_r+0xa>
 800448a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800448c:	07d0      	lsls	r0, r2, #31
 800448e:	d404      	bmi.n	800449a <_fflush_r+0x3a>
 8004490:	0599      	lsls	r1, r3, #22
 8004492:	d402      	bmi.n	800449a <_fflush_r+0x3a>
 8004494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004496:	f000 f915 	bl	80046c4 <__retarget_lock_acquire_recursive>
 800449a:	4628      	mov	r0, r5
 800449c:	4621      	mov	r1, r4
 800449e:	f7ff ff5d 	bl	800435c <__sflush_r>
 80044a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044a4:	4605      	mov	r5, r0
 80044a6:	07da      	lsls	r2, r3, #31
 80044a8:	d4e0      	bmi.n	800446c <_fflush_r+0xc>
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	059b      	lsls	r3, r3, #22
 80044ae:	d4dd      	bmi.n	800446c <_fflush_r+0xc>
 80044b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044b2:	f000 f908 	bl	80046c6 <__retarget_lock_release_recursive>
 80044b6:	e7d9      	b.n	800446c <_fflush_r+0xc>
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_fflush_r+0x70>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d101      	bne.n	80044c2 <_fflush_r+0x62>
 80044be:	68ac      	ldr	r4, [r5, #8]
 80044c0:	e7df      	b.n	8004482 <_fflush_r+0x22>
 80044c2:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <_fflush_r+0x74>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	bf08      	it	eq
 80044c8:	68ec      	ldreq	r4, [r5, #12]
 80044ca:	e7da      	b.n	8004482 <_fflush_r+0x22>
 80044cc:	08004c84 	.word	0x08004c84
 80044d0:	08004ca4 	.word	0x08004ca4
 80044d4:	08004c64 	.word	0x08004c64

080044d8 <std>:
 80044d8:	2300      	movs	r3, #0
 80044da:	b510      	push	{r4, lr}
 80044dc:	4604      	mov	r4, r0
 80044de:	e9c0 3300 	strd	r3, r3, [r0]
 80044e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044e6:	6083      	str	r3, [r0, #8]
 80044e8:	8181      	strh	r1, [r0, #12]
 80044ea:	6643      	str	r3, [r0, #100]	; 0x64
 80044ec:	81c2      	strh	r2, [r0, #14]
 80044ee:	6183      	str	r3, [r0, #24]
 80044f0:	4619      	mov	r1, r3
 80044f2:	2208      	movs	r2, #8
 80044f4:	305c      	adds	r0, #92	; 0x5c
 80044f6:	f7ff f895 	bl	8003624 <memset>
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <std+0x38>)
 80044fc:	6224      	str	r4, [r4, #32]
 80044fe:	6263      	str	r3, [r4, #36]	; 0x24
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <std+0x3c>)
 8004502:	62a3      	str	r3, [r4, #40]	; 0x28
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <std+0x40>)
 8004506:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <std+0x44>)
 800450a:	6323      	str	r3, [r4, #48]	; 0x30
 800450c:	bd10      	pop	{r4, pc}
 800450e:	bf00      	nop
 8004510:	08004901 	.word	0x08004901
 8004514:	08004923 	.word	0x08004923
 8004518:	0800495b 	.word	0x0800495b
 800451c:	0800497f 	.word	0x0800497f

08004520 <_cleanup_r>:
 8004520:	4901      	ldr	r1, [pc, #4]	; (8004528 <_cleanup_r+0x8>)
 8004522:	f000 b8af 	b.w	8004684 <_fwalk_reent>
 8004526:	bf00      	nop
 8004528:	08004461 	.word	0x08004461

0800452c <__sfmoreglue>:
 800452c:	2268      	movs	r2, #104	; 0x68
 800452e:	b570      	push	{r4, r5, r6, lr}
 8004530:	1e4d      	subs	r5, r1, #1
 8004532:	4355      	muls	r5, r2
 8004534:	460e      	mov	r6, r1
 8004536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800453a:	f7ff f979 	bl	8003830 <_malloc_r>
 800453e:	4604      	mov	r4, r0
 8004540:	b140      	cbz	r0, 8004554 <__sfmoreglue+0x28>
 8004542:	2100      	movs	r1, #0
 8004544:	e9c0 1600 	strd	r1, r6, [r0]
 8004548:	300c      	adds	r0, #12
 800454a:	60a0      	str	r0, [r4, #8]
 800454c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004550:	f7ff f868 	bl	8003624 <memset>
 8004554:	4620      	mov	r0, r4
 8004556:	bd70      	pop	{r4, r5, r6, pc}

08004558 <__sfp_lock_acquire>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__sfp_lock_acquire+0x8>)
 800455a:	f000 b8b3 	b.w	80046c4 <__retarget_lock_acquire_recursive>
 800455e:	bf00      	nop
 8004560:	20000455 	.word	0x20000455

08004564 <__sfp_lock_release>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__sfp_lock_release+0x8>)
 8004566:	f000 b8ae 	b.w	80046c6 <__retarget_lock_release_recursive>
 800456a:	bf00      	nop
 800456c:	20000455 	.word	0x20000455

08004570 <__sinit_lock_acquire>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__sinit_lock_acquire+0x8>)
 8004572:	f000 b8a7 	b.w	80046c4 <__retarget_lock_acquire_recursive>
 8004576:	bf00      	nop
 8004578:	20000456 	.word	0x20000456

0800457c <__sinit_lock_release>:
 800457c:	4801      	ldr	r0, [pc, #4]	; (8004584 <__sinit_lock_release+0x8>)
 800457e:	f000 b8a2 	b.w	80046c6 <__retarget_lock_release_recursive>
 8004582:	bf00      	nop
 8004584:	20000456 	.word	0x20000456

08004588 <__sinit>:
 8004588:	b510      	push	{r4, lr}
 800458a:	4604      	mov	r4, r0
 800458c:	f7ff fff0 	bl	8004570 <__sinit_lock_acquire>
 8004590:	69a3      	ldr	r3, [r4, #24]
 8004592:	b11b      	cbz	r3, 800459c <__sinit+0x14>
 8004594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004598:	f7ff bff0 	b.w	800457c <__sinit_lock_release>
 800459c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045a0:	6523      	str	r3, [r4, #80]	; 0x50
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <__sinit+0x68>)
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <__sinit+0x6c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	bf08      	it	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	4620      	mov	r0, r4
 80045b2:	bf08      	it	eq
 80045b4:	61a3      	streq	r3, [r4, #24]
 80045b6:	f000 f81f 	bl	80045f8 <__sfp>
 80045ba:	6060      	str	r0, [r4, #4]
 80045bc:	4620      	mov	r0, r4
 80045be:	f000 f81b 	bl	80045f8 <__sfp>
 80045c2:	60a0      	str	r0, [r4, #8]
 80045c4:	4620      	mov	r0, r4
 80045c6:	f000 f817 	bl	80045f8 <__sfp>
 80045ca:	2200      	movs	r2, #0
 80045cc:	2104      	movs	r1, #4
 80045ce:	60e0      	str	r0, [r4, #12]
 80045d0:	6860      	ldr	r0, [r4, #4]
 80045d2:	f7ff ff81 	bl	80044d8 <std>
 80045d6:	2201      	movs	r2, #1
 80045d8:	2109      	movs	r1, #9
 80045da:	68a0      	ldr	r0, [r4, #8]
 80045dc:	f7ff ff7c 	bl	80044d8 <std>
 80045e0:	2202      	movs	r2, #2
 80045e2:	2112      	movs	r1, #18
 80045e4:	68e0      	ldr	r0, [r4, #12]
 80045e6:	f7ff ff77 	bl	80044d8 <std>
 80045ea:	2301      	movs	r3, #1
 80045ec:	61a3      	str	r3, [r4, #24]
 80045ee:	e7d1      	b.n	8004594 <__sinit+0xc>
 80045f0:	08004b7c 	.word	0x08004b7c
 80045f4:	08004521 	.word	0x08004521

080045f8 <__sfp>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	4607      	mov	r7, r0
 80045fc:	f7ff ffac 	bl	8004558 <__sfp_lock_acquire>
 8004600:	4b1e      	ldr	r3, [pc, #120]	; (800467c <__sfp+0x84>)
 8004602:	681e      	ldr	r6, [r3, #0]
 8004604:	69b3      	ldr	r3, [r6, #24]
 8004606:	b913      	cbnz	r3, 800460e <__sfp+0x16>
 8004608:	4630      	mov	r0, r6
 800460a:	f7ff ffbd 	bl	8004588 <__sinit>
 800460e:	3648      	adds	r6, #72	; 0x48
 8004610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004614:	3b01      	subs	r3, #1
 8004616:	d503      	bpl.n	8004620 <__sfp+0x28>
 8004618:	6833      	ldr	r3, [r6, #0]
 800461a:	b30b      	cbz	r3, 8004660 <__sfp+0x68>
 800461c:	6836      	ldr	r6, [r6, #0]
 800461e:	e7f7      	b.n	8004610 <__sfp+0x18>
 8004620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004624:	b9d5      	cbnz	r5, 800465c <__sfp+0x64>
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <__sfp+0x88>)
 8004628:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800462c:	60e3      	str	r3, [r4, #12]
 800462e:	6665      	str	r5, [r4, #100]	; 0x64
 8004630:	f000 f847 	bl	80046c2 <__retarget_lock_init_recursive>
 8004634:	f7ff ff96 	bl	8004564 <__sfp_lock_release>
 8004638:	2208      	movs	r2, #8
 800463a:	4629      	mov	r1, r5
 800463c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004640:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004644:	6025      	str	r5, [r4, #0]
 8004646:	61a5      	str	r5, [r4, #24]
 8004648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800464c:	f7fe ffea 	bl	8003624 <memset>
 8004650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004658:	4620      	mov	r0, r4
 800465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800465c:	3468      	adds	r4, #104	; 0x68
 800465e:	e7d9      	b.n	8004614 <__sfp+0x1c>
 8004660:	2104      	movs	r1, #4
 8004662:	4638      	mov	r0, r7
 8004664:	f7ff ff62 	bl	800452c <__sfmoreglue>
 8004668:	4604      	mov	r4, r0
 800466a:	6030      	str	r0, [r6, #0]
 800466c:	2800      	cmp	r0, #0
 800466e:	d1d5      	bne.n	800461c <__sfp+0x24>
 8004670:	f7ff ff78 	bl	8004564 <__sfp_lock_release>
 8004674:	230c      	movs	r3, #12
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	e7ee      	b.n	8004658 <__sfp+0x60>
 800467a:	bf00      	nop
 800467c:	08004b7c 	.word	0x08004b7c
 8004680:	ffff0001 	.word	0xffff0001

08004684 <_fwalk_reent>:
 8004684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004688:	4606      	mov	r6, r0
 800468a:	4688      	mov	r8, r1
 800468c:	2700      	movs	r7, #0
 800468e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004692:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004696:	f1b9 0901 	subs.w	r9, r9, #1
 800469a:	d505      	bpl.n	80046a8 <_fwalk_reent+0x24>
 800469c:	6824      	ldr	r4, [r4, #0]
 800469e:	2c00      	cmp	r4, #0
 80046a0:	d1f7      	bne.n	8004692 <_fwalk_reent+0xe>
 80046a2:	4638      	mov	r0, r7
 80046a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046a8:	89ab      	ldrh	r3, [r5, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d907      	bls.n	80046be <_fwalk_reent+0x3a>
 80046ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046b2:	3301      	adds	r3, #1
 80046b4:	d003      	beq.n	80046be <_fwalk_reent+0x3a>
 80046b6:	4629      	mov	r1, r5
 80046b8:	4630      	mov	r0, r6
 80046ba:	47c0      	blx	r8
 80046bc:	4307      	orrs	r7, r0
 80046be:	3568      	adds	r5, #104	; 0x68
 80046c0:	e7e9      	b.n	8004696 <_fwalk_reent+0x12>

080046c2 <__retarget_lock_init_recursive>:
 80046c2:	4770      	bx	lr

080046c4 <__retarget_lock_acquire_recursive>:
 80046c4:	4770      	bx	lr

080046c6 <__retarget_lock_release_recursive>:
 80046c6:	4770      	bx	lr

080046c8 <__swhatbuf_r>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	460e      	mov	r6, r1
 80046cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d0:	4614      	mov	r4, r2
 80046d2:	2900      	cmp	r1, #0
 80046d4:	461d      	mov	r5, r3
 80046d6:	b096      	sub	sp, #88	; 0x58
 80046d8:	da08      	bge.n	80046ec <__swhatbuf_r+0x24>
 80046da:	2200      	movs	r2, #0
 80046dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046e0:	602a      	str	r2, [r5, #0]
 80046e2:	061a      	lsls	r2, r3, #24
 80046e4:	d410      	bmi.n	8004708 <__swhatbuf_r+0x40>
 80046e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ea:	e00e      	b.n	800470a <__swhatbuf_r+0x42>
 80046ec:	466a      	mov	r2, sp
 80046ee:	f000 f96d 	bl	80049cc <_fstat_r>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	dbf1      	blt.n	80046da <__swhatbuf_r+0x12>
 80046f6:	9a01      	ldr	r2, [sp, #4]
 80046f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004700:	425a      	negs	r2, r3
 8004702:	415a      	adcs	r2, r3
 8004704:	602a      	str	r2, [r5, #0]
 8004706:	e7ee      	b.n	80046e6 <__swhatbuf_r+0x1e>
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	2000      	movs	r0, #0
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	b016      	add	sp, #88	; 0x58
 8004710:	bd70      	pop	{r4, r5, r6, pc}
	...

08004714 <__smakebuf_r>:
 8004714:	898b      	ldrh	r3, [r1, #12]
 8004716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004718:	079d      	lsls	r5, r3, #30
 800471a:	4606      	mov	r6, r0
 800471c:	460c      	mov	r4, r1
 800471e:	d507      	bpl.n	8004730 <__smakebuf_r+0x1c>
 8004720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	2301      	movs	r3, #1
 800472a:	6163      	str	r3, [r4, #20]
 800472c:	b002      	add	sp, #8
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	466a      	mov	r2, sp
 8004732:	ab01      	add	r3, sp, #4
 8004734:	f7ff ffc8 	bl	80046c8 <__swhatbuf_r>
 8004738:	9900      	ldr	r1, [sp, #0]
 800473a:	4605      	mov	r5, r0
 800473c:	4630      	mov	r0, r6
 800473e:	f7ff f877 	bl	8003830 <_malloc_r>
 8004742:	b948      	cbnz	r0, 8004758 <__smakebuf_r+0x44>
 8004744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004748:	059a      	lsls	r2, r3, #22
 800474a:	d4ef      	bmi.n	800472c <__smakebuf_r+0x18>
 800474c:	f023 0303 	bic.w	r3, r3, #3
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	e7e3      	b.n	8004720 <__smakebuf_r+0xc>
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <__smakebuf_r+0x7c>)
 800475a:	62b3      	str	r3, [r6, #40]	; 0x28
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	6020      	str	r0, [r4, #0]
 8004760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	6120      	str	r0, [r4, #16]
 800476a:	6163      	str	r3, [r4, #20]
 800476c:	9b01      	ldr	r3, [sp, #4]
 800476e:	b15b      	cbz	r3, 8004788 <__smakebuf_r+0x74>
 8004770:	4630      	mov	r0, r6
 8004772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004776:	f000 f93b 	bl	80049f0 <_isatty_r>
 800477a:	b128      	cbz	r0, 8004788 <__smakebuf_r+0x74>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	89a0      	ldrh	r0, [r4, #12]
 800478a:	4305      	orrs	r5, r0
 800478c:	81a5      	strh	r5, [r4, #12]
 800478e:	e7cd      	b.n	800472c <__smakebuf_r+0x18>
 8004790:	08004521 	.word	0x08004521

08004794 <memchr>:
 8004794:	4603      	mov	r3, r0
 8004796:	b510      	push	{r4, lr}
 8004798:	b2c9      	uxtb	r1, r1
 800479a:	4402      	add	r2, r0
 800479c:	4293      	cmp	r3, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	d101      	bne.n	80047a6 <memchr+0x12>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e003      	b.n	80047ae <memchr+0x1a>
 80047a6:	7804      	ldrb	r4, [r0, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	428c      	cmp	r4, r1
 80047ac:	d1f6      	bne.n	800479c <memchr+0x8>
 80047ae:	bd10      	pop	{r4, pc}

080047b0 <memcpy>:
 80047b0:	440a      	add	r2, r1
 80047b2:	4291      	cmp	r1, r2
 80047b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047b8:	d100      	bne.n	80047bc <memcpy+0xc>
 80047ba:	4770      	bx	lr
 80047bc:	b510      	push	{r4, lr}
 80047be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047c2:	4291      	cmp	r1, r2
 80047c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c8:	d1f9      	bne.n	80047be <memcpy+0xe>
 80047ca:	bd10      	pop	{r4, pc}

080047cc <memmove>:
 80047cc:	4288      	cmp	r0, r1
 80047ce:	b510      	push	{r4, lr}
 80047d0:	eb01 0402 	add.w	r4, r1, r2
 80047d4:	d902      	bls.n	80047dc <memmove+0x10>
 80047d6:	4284      	cmp	r4, r0
 80047d8:	4623      	mov	r3, r4
 80047da:	d807      	bhi.n	80047ec <memmove+0x20>
 80047dc:	1e43      	subs	r3, r0, #1
 80047de:	42a1      	cmp	r1, r4
 80047e0:	d008      	beq.n	80047f4 <memmove+0x28>
 80047e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047ea:	e7f8      	b.n	80047de <memmove+0x12>
 80047ec:	4601      	mov	r1, r0
 80047ee:	4402      	add	r2, r0
 80047f0:	428a      	cmp	r2, r1
 80047f2:	d100      	bne.n	80047f6 <memmove+0x2a>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047fe:	e7f7      	b.n	80047f0 <memmove+0x24>

08004800 <__malloc_lock>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__malloc_lock+0x8>)
 8004802:	f7ff bf5f 	b.w	80046c4 <__retarget_lock_acquire_recursive>
 8004806:	bf00      	nop
 8004808:	20000454 	.word	0x20000454

0800480c <__malloc_unlock>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__malloc_unlock+0x8>)
 800480e:	f7ff bf5a 	b.w	80046c6 <__retarget_lock_release_recursive>
 8004812:	bf00      	nop
 8004814:	20000454 	.word	0x20000454

08004818 <_realloc_r>:
 8004818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481c:	4680      	mov	r8, r0
 800481e:	4614      	mov	r4, r2
 8004820:	460e      	mov	r6, r1
 8004822:	b921      	cbnz	r1, 800482e <_realloc_r+0x16>
 8004824:	4611      	mov	r1, r2
 8004826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	f7ff b801 	b.w	8003830 <_malloc_r>
 800482e:	b92a      	cbnz	r2, 800483c <_realloc_r+0x24>
 8004830:	f7fe ff96 	bl	8003760 <_free_r>
 8004834:	4625      	mov	r5, r4
 8004836:	4628      	mov	r0, r5
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483c:	f000 f8fa 	bl	8004a34 <_malloc_usable_size_r>
 8004840:	4284      	cmp	r4, r0
 8004842:	4607      	mov	r7, r0
 8004844:	d802      	bhi.n	800484c <_realloc_r+0x34>
 8004846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800484a:	d812      	bhi.n	8004872 <_realloc_r+0x5a>
 800484c:	4621      	mov	r1, r4
 800484e:	4640      	mov	r0, r8
 8004850:	f7fe ffee 	bl	8003830 <_malloc_r>
 8004854:	4605      	mov	r5, r0
 8004856:	2800      	cmp	r0, #0
 8004858:	d0ed      	beq.n	8004836 <_realloc_r+0x1e>
 800485a:	42bc      	cmp	r4, r7
 800485c:	4622      	mov	r2, r4
 800485e:	4631      	mov	r1, r6
 8004860:	bf28      	it	cs
 8004862:	463a      	movcs	r2, r7
 8004864:	f7ff ffa4 	bl	80047b0 <memcpy>
 8004868:	4631      	mov	r1, r6
 800486a:	4640      	mov	r0, r8
 800486c:	f7fe ff78 	bl	8003760 <_free_r>
 8004870:	e7e1      	b.n	8004836 <_realloc_r+0x1e>
 8004872:	4635      	mov	r5, r6
 8004874:	e7df      	b.n	8004836 <_realloc_r+0x1e>

08004876 <_raise_r>:
 8004876:	291f      	cmp	r1, #31
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4604      	mov	r4, r0
 800487c:	460d      	mov	r5, r1
 800487e:	d904      	bls.n	800488a <_raise_r+0x14>
 8004880:	2316      	movs	r3, #22
 8004882:	6003      	str	r3, [r0, #0]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	bd38      	pop	{r3, r4, r5, pc}
 800488a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800488c:	b112      	cbz	r2, 8004894 <_raise_r+0x1e>
 800488e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004892:	b94b      	cbnz	r3, 80048a8 <_raise_r+0x32>
 8004894:	4620      	mov	r0, r4
 8004896:	f000 f831 	bl	80048fc <_getpid_r>
 800489a:	462a      	mov	r2, r5
 800489c:	4601      	mov	r1, r0
 800489e:	4620      	mov	r0, r4
 80048a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a4:	f000 b818 	b.w	80048d8 <_kill_r>
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d00a      	beq.n	80048c2 <_raise_r+0x4c>
 80048ac:	1c59      	adds	r1, r3, #1
 80048ae:	d103      	bne.n	80048b8 <_raise_r+0x42>
 80048b0:	2316      	movs	r3, #22
 80048b2:	6003      	str	r3, [r0, #0]
 80048b4:	2001      	movs	r0, #1
 80048b6:	e7e7      	b.n	8004888 <_raise_r+0x12>
 80048b8:	2400      	movs	r4, #0
 80048ba:	4628      	mov	r0, r5
 80048bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80048c0:	4798      	blx	r3
 80048c2:	2000      	movs	r0, #0
 80048c4:	e7e0      	b.n	8004888 <_raise_r+0x12>
	...

080048c8 <raise>:
 80048c8:	4b02      	ldr	r3, [pc, #8]	; (80048d4 <raise+0xc>)
 80048ca:	4601      	mov	r1, r0
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	f7ff bfd2 	b.w	8004876 <_raise_r>
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <_kill_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	2300      	movs	r3, #0
 80048dc:	4d06      	ldr	r5, [pc, #24]	; (80048f8 <_kill_r+0x20>)
 80048de:	4604      	mov	r4, r0
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	f7fc f80a 	bl	80008fe <_kill>
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	d102      	bne.n	80048f4 <_kill_r+0x1c>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	b103      	cbz	r3, 80048f4 <_kill_r+0x1c>
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
 80048f6:	bf00      	nop
 80048f8:	20000458 	.word	0x20000458

080048fc <_getpid_r>:
 80048fc:	f7fb bff8 	b.w	80008f0 <_getpid>

08004900 <__sread>:
 8004900:	b510      	push	{r4, lr}
 8004902:	460c      	mov	r4, r1
 8004904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004908:	f000 f89c 	bl	8004a44 <_read_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	bfab      	itete	ge
 8004910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004912:	89a3      	ldrhlt	r3, [r4, #12]
 8004914:	181b      	addge	r3, r3, r0
 8004916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800491a:	bfac      	ite	ge
 800491c:	6563      	strge	r3, [r4, #84]	; 0x54
 800491e:	81a3      	strhlt	r3, [r4, #12]
 8004920:	bd10      	pop	{r4, pc}

08004922 <__swrite>:
 8004922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	461f      	mov	r7, r3
 8004928:	898b      	ldrh	r3, [r1, #12]
 800492a:	4605      	mov	r5, r0
 800492c:	05db      	lsls	r3, r3, #23
 800492e:	460c      	mov	r4, r1
 8004930:	4616      	mov	r6, r2
 8004932:	d505      	bpl.n	8004940 <__swrite+0x1e>
 8004934:	2302      	movs	r3, #2
 8004936:	2200      	movs	r2, #0
 8004938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493c:	f000 f868 	bl	8004a10 <_lseek_r>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	4632      	mov	r2, r6
 8004944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004948:	81a3      	strh	r3, [r4, #12]
 800494a:	4628      	mov	r0, r5
 800494c:	463b      	mov	r3, r7
 800494e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	f000 b817 	b.w	8004988 <_write_r>

0800495a <__sseek>:
 800495a:	b510      	push	{r4, lr}
 800495c:	460c      	mov	r4, r1
 800495e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004962:	f000 f855 	bl	8004a10 <_lseek_r>
 8004966:	1c43      	adds	r3, r0, #1
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	bf15      	itete	ne
 800496c:	6560      	strne	r0, [r4, #84]	; 0x54
 800496e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004976:	81a3      	strheq	r3, [r4, #12]
 8004978:	bf18      	it	ne
 800497a:	81a3      	strhne	r3, [r4, #12]
 800497c:	bd10      	pop	{r4, pc}

0800497e <__sclose>:
 800497e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004982:	f000 b813 	b.w	80049ac <_close_r>
	...

08004988 <_write_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4604      	mov	r4, r0
 800498c:	4608      	mov	r0, r1
 800498e:	4611      	mov	r1, r2
 8004990:	2200      	movs	r2, #0
 8004992:	4d05      	ldr	r5, [pc, #20]	; (80049a8 <_write_r+0x20>)
 8004994:	602a      	str	r2, [r5, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	f7fb ffe8 	bl	800096c <_write>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <_write_r+0x1e>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	b103      	cbz	r3, 80049a6 <_write_r+0x1e>
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	20000458 	.word	0x20000458

080049ac <_close_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	2300      	movs	r3, #0
 80049b0:	4d05      	ldr	r5, [pc, #20]	; (80049c8 <_close_r+0x1c>)
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	f7fb fff4 	bl	80009a4 <_close>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_close_r+0x1a>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_close_r+0x1a>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	20000458 	.word	0x20000458

080049cc <_fstat_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	2300      	movs	r3, #0
 80049d0:	4d06      	ldr	r5, [pc, #24]	; (80049ec <_fstat_r+0x20>)
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	f7fb ffee 	bl	80009ba <_fstat>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d102      	bne.n	80049e8 <_fstat_r+0x1c>
 80049e2:	682b      	ldr	r3, [r5, #0]
 80049e4:	b103      	cbz	r3, 80049e8 <_fstat_r+0x1c>
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	bf00      	nop
 80049ec:	20000458 	.word	0x20000458

080049f0 <_isatty_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	2300      	movs	r3, #0
 80049f4:	4d05      	ldr	r5, [pc, #20]	; (8004a0c <_isatty_r+0x1c>)
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	f7fb ffec 	bl	80009d8 <_isatty>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_isatty_r+0x1a>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_isatty_r+0x1a>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20000458 	.word	0x20000458

08004a10 <_lseek_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4d05      	ldr	r5, [pc, #20]	; (8004a30 <_lseek_r+0x20>)
 8004a1c:	602a      	str	r2, [r5, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f7fb ffe4 	bl	80009ec <_lseek>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_lseek_r+0x1e>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_lseek_r+0x1e>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	20000458 	.word	0x20000458

08004a34 <_malloc_usable_size_r>:
 8004a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a38:	1f18      	subs	r0, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bfbc      	itt	lt
 8004a3e:	580b      	ldrlt	r3, [r1, r0]
 8004a40:	18c0      	addlt	r0, r0, r3
 8004a42:	4770      	bx	lr

08004a44 <_read_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4604      	mov	r4, r0
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	4d05      	ldr	r5, [pc, #20]	; (8004a64 <_read_r+0x20>)
 8004a50:	602a      	str	r2, [r5, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f7fb ff6d 	bl	8000932 <_read>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_read_r+0x1e>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_read_r+0x1e>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	20000458 	.word	0x20000458

08004a68 <_init>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr

08004a74 <_fini>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr
